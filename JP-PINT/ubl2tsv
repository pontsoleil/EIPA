#!/usr/bin/env python3
#coding: utf-8
#
# generate TSV from XML Schema
# 
# designed by SAMBUICHI, Nobuyuki (Sambuichi Professional Engineers Office)
# written by SAMBUICHI, Nobuyuki (Sambuichi Professional Engineers Office)
#
# MIT License
# 
# Copyright (c) 2021 SAMBUICHI Nobuyuki (Sambuichi Professional Engineers Office)
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
import xml.etree.ElementTree as ET
import csv
import re
import json
import sys 
import os
import argparse

from dic2etree import *

cbcElement = {}
cacElement = {}
cbcType = {}
cacType = {}

def file_path(pathname):
  if '/' == pathname[0:1]:
    return pathname
  else:
    dir = os.path.dirname(__file__)
    new_path = os.path.join(dir, pathname)
    return new_path

def namespce_code(dic):
  dicJson = json.dumps(dic)
  dicJson = re.sub('{' + ns[''] + '}', '', dicJson)
  dicJson = re.sub('{' + ns['cac'] + '}', 'cac:', dicJson)
  dicJson = re.sub('{' + ns['cbc'] + '}', 'cbc:', dicJson)
  dicJson = re.sub('{' + ns['ccts'] + '}', 'cbc:', dicJson)
  dicJson = re.sub('{' + ns['xsd'] + '}', 'sch:', dicJson)
  dicJson = re.sub('{' + ns['xsi'] + '}', 'sch:', dicJson)
  dicJson = re.sub('{' + ns['sch'] + '}', 'sch:', dicJson)
  return json.loads(dicJson)

def getType(ref):
  el = ref[4:]
  if 'cac' == ref[:3]:
    if el in cacElement:
      tp = cacElement[el]['type']
    return tp
  elif 'cbc' == ref[:3]:
    if el in cbcElement:
      tp = cbcElement[el]
    return tp
  return None

def pathDepth(path):
  listOfElems = path.split('cac')
  return len(listOfElems)

def pathElement(path):
  listOfElems = path[1:].split('/')
  return listOfElems[len(listOfElems) -1]

def parse_cbc(dic):
  def process_cbc(element):
    element_name = element['@name']
    element_type = element['@type']
    cbcElement[element_name] = element_type

  def process_cbcType(complexType):
    type_name = complexType['@name']
    type_base = complexType['sch:simpleContent']['sch:extension']['@base']
    cbcType[type_name] = type_base

  if dic['sch:schema'] and isinstance(dic['sch:schema'], dict):
    for tag, body in dic['sch:schema'].items():
      if 'sch:element' == tag:
        if isinstance(body, dict):
          process_cbc(body)
        elif isinstance(body, list):
          for element in body:
            process_cbc(element)
      elif 'sch:complexType' == tag:
        if isinstance(body, dict):
          process_cbcType(body)
        elif isinstance(body, list):
          for complexType in body:
            process_cbcType(complexType)

def parse_cac(dic):
  def process_cac(element):
    element_name = element['@name']
    element_type = element['@type']
    cacElement[element_name] = {'name':element_name, 'type':element_type}

  def process_cacType(complexType):
    type_name = complexType['@name']
    type_sequence = complexType['sch:sequence']['sch:element']
    cacType[type_name] = []
    if isinstance(type_sequence, dict):
        el = type_sequence
        ref = el['@ref']
        minOccurs = el['@minOccurs']
        maxOccurs = el['@maxOccurs']
        record = {'ref': ref, 'minOccurs': minOccurs, 'maxOccurs': maxOccurs}
        cacType[type_name].append(record)
    elif isinstance(type_sequence, list):
      for el in type_sequence:
        ref = el['@ref']
        minOccurs = el['@minOccurs']
        maxOccurs = el['@maxOccurs']
        record = {'ref': ref, 'minOccurs': minOccurs, 'maxOccurs': maxOccurs}
        cacType[type_name].append(record)

  if dic['sch:schema'] and isinstance(dic['sch:schema'], dict):
    for tag, body in dic['sch:schema'].items():
      if 'sch:element' == tag:
        if isinstance(body, dict):
          process_cac(body)
        elif isinstance(body, list):
          for element in body:
            process_cac(element)
      elif 'sch:complexType' == tag:
        if isinstance(body, dict):
          process_cacType(body)
        elif isinstance(body, list):
          for complexType in body:
            process_cacType(complexType)

if __name__ == '__main__':
  # Create the parser
  parser = argparse.ArgumentParser(prog='invoice2tsv',
                                  usage='%(prog)s [options] infile cbcschema cacschema -o out',
                                  description='電子インボイスXMLファイルをTSVファイルに変換')
  # Add the arguments
  parser.add_argument('inFile', metavar='infile', type=str, help='入力XMLファイル')
  parser.add_argument('cbcSchema', metavar='cbcschema', type=str, help='CBCスキーマ')
  parser.add_argument('cacSchema', metavar='cacschema', type=str, help='CACスキーマ')
  parser.add_argument('-o', '--out')
  parser.add_argument('-v', '--verbose', action='store_true')
  args = parser.parse_args()
  in_file = file_path(args.inFile)
  cbc_schema = file_path(args.cbcSchema)
  cac_schema = file_path(args.cacSchema)
  pre, ext = os.path.splitext(in_file)
  tmp_file = pre + '.tmp'
  if args.out:
    out_file = file_path(args.out)
  else:
    out_file = pre + '.tsv'
  verbose = args.verbose
  # Check if infile exists
  if not os.path.isfile(in_file):
    print('入力ファイルがありません')
    sys.exit()
  if verbose:
    print('** START ** ', __file__)

  tree = ET.parse(cbc_schema)
  root = tree.getroot()
  dic = etree_to_dict(root)
  dic2 = namespce_code(dic)
  parse_cbc(dic2)

  tree = ET.parse(cac_schema)
  root = tree.getroot()
  dic = etree_to_dict(root)
  dic2 = namespce_code(dic)
  parse_cac(dic2)

  tree = ET.parse(in_file)
  root = tree.getroot()
  dic = etree_to_dict(root)
  dic2 = namespce_code(dic)
  target = {'name':dic2['sch:schema']['sch:element']['@name'], 'type':dic2['sch:schema']['sch:element']['@type']}
  parse_cac(dic2)

  records = []
  targetType = cacType[target['type']]

  def createRecord(type_, path, level):
    def isDuplicates(path):
      ref = pathElement(path)
      thisType = getType(ref)
      listOfElems = path[1:].split('/')
      listOfTypes = [getType(x) for x in listOfElems]
      listOfTypes = [x for x in listOfTypes if x]
      if 'cac' == ref[:3]:
        parent = listOfElems[:-1][-1:][0]
        parentType = getType(parent)
        setOfTypes = set()
        for _type in listOfTypes:
          if _type in setOfTypes:
            if parentType == thisType and parent != ref:
              return False
            return True
          else:
            setOfTypes.add(_type)         
        return False
      elif 'cbc' == ref[:3]:
        if len(listOfTypes) == len(set(listOfTypes)):
          return False
        return True
    if verbose:
      print(level, path)
    ref = pathElement(path)
    if isDuplicates(path) or level > 5:
      return
    if isinstance(type_, dict):
      minOccurs = type_['minOccurs']
      maxOccurs = type_['maxOccurs']
      record = {'level':level, 'ref':ref, 'type':None, 'path':path, 'minOccurs':minOccurs, 'maxOccurs':maxOccurs}
      if 'cbc' == ref[:3]:
        el = ref[4:]
        tp = cbcElement[ref[4:]]
        _type = cbcType[tp]
        record['type'] = _type
        records.append(record)
        return
      if 'cac' == ref[:3]:
        el = ref[4:]
        if not el in cacElement:
          return
        tp = cacElement[el]['type']
        record['type'] = tp
        records.append(record)
        _type = cacType[tp]
        assert isinstance(_type, list)
        for el in _type:
          createRecord(el, path+'/'+el['ref'], level+1)
        return
      return
    if isinstance(type_, list):
      for el in type_:
        createRecord(el, path+'/'+el['ref'], level+1)
      return
    return

  createRecord(targetType, '/'+target['name'], 0)

  with open(out_file, 'w') as f:
    writer = csv.writer(f, delimiter='\t')
    record = ['seq', 'level', 'ref', 'datatype', 'occurrence', 'XPath']
    writer.writerow(record)
    seq = 1000
    for d in records:
      ref = d['ref']
      path = d['path']
      depth = pathDepth(path)
      datatype = d['type']  
      if 'cac' == ref[:3]:
        depth -= 1
      elif 'cbc' == ref[:3]:
        datatype = datatype.replace('Type', '')
        if 'udt' == datatype[:3]:
          datatype = datatype[4:]
      occurrence = d['minOccurs']+'..'
      if 'unbounded' == d['maxOccurs']:
        occurrence += 'n'
      else:
        occurrence += str(d['maxOccurs'])
      record = [seq, depth, ref, datatype, occurrence, path]
      writer.writerow(record)
      seq += 10
