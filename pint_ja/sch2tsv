#!/usr/bin/env python3
#coding: utf-8
#
# generate TSV from XML Schematron
# 
# designed by SAMBUICHI, Nobuyuki (Sambuichi Professional Engineers Office)
# written by SAMBUICHI, Nobuyuki (Sambuichi Professional Engineers Office)
#
# MIT License
# 
# Copyright (c) 2021 SAMBUICHI Nobuyuki (Sambuichi Professional Engineers Office)
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
import xml.etree.ElementTree as ET
from collections import defaultdict
from operator import itemgetter
import csv
import re
import json
import sys 
import os
import argparse

from dic2etree import *

dictID = defaultdict(type(''))
dictXpath = defaultdict(type(''))

def file_path(pathname):
  if '/' == pathname[0:1]:
    return pathname
  else:
    dir = os.path.dirname(__file__)
    new_path = os.path.join(dir, pathname)
    return new_path

def dict_to_tsv(tsv, root):
  def setup_record(ct, id, flag, test, text):
    test = test.strip()
    test = ' '.join(test.split())
    text = text.strip()
    text = ' '.join(text.split())
    terms_pattern = 'BT-[0-9]*'
    terms = re.findall(terms_pattern, text, flags=re.IGNORECASE)
    terms = ' '.join(terms)
    groups_pattern = 'BG-[0-9]*'
    groups = re.findall(groups_pattern, text, flags=re.IGNORECASE)
    groups = ' '.join(groups)
    record = [ct, id, flag, test, text, groups, terms]
    return record

  def process_pattern(tsv, pattern):
    rules = pattern['sch:rule']
    if isinstance(rules, dict):
      try:
        ct = rules['@context']
        d = rules['sch:assert']
        if isinstance(d, list):
          for v in d:
            record = setup_record(ct, v['@id'], v['@flag'], v['@test'], v['#text'])
            tsv.append(record)
        elif isinstance(d, dict):
          record = setup_record(ct, d['@id'], d['@flag'], d['@test'], d['#text'])
          tsv.append(record)
      except Exception:
        pass
    elif isinstance(rules, list):
      for rule in rules:
        try:
          ct = rule['@context']
          d = rule['sch:assert']
          if isinstance(d, list):
            for v in d:
              record = setup_record(ct, v['@id'], v['@flag'], v['@test'], v['#text'])
              tsv.append(record)
          elif isinstance(d, dict):
            record = setup_record(ct, d['@id'], d['@flag'], d['@test'], d['#text'])
            tsv.append(record)
        except Exception:
          pass
    # return tsv
  
  # header
  record = ['context', 'id', 'flag', 'test', '#text', 'BG', 'BT']
  tsv.append(record)
  if 'sch:pattern' in root:
    pattern = root['sch:pattern']
    tsv = process_pattern(tsv, pattern)
  elif root['sch:schema'] and isinstance(root['sch:schema'], dict):
    for tag, body in root['sch:schema'].items():
      if 'sch:pattern' == tag:
        for pattern in body:
          tsv = process_pattern(tsv, pattern)
          # rules = pattern['sch:rule']
          # if isinstance(rules, dict):
          #   try:
          #     ct = rules['@context']
          #     d = rules['sch:assert']
          #     if isinstance(d, list):
          #       for v in d:
          #         record = setup_record(ct, v['@id'], v['@flag'], v['@test'], v['#text'])
          #         tsv.append(record)
          #     elif isinstance(d, dict):
          #       record = setup_record(ct, d['@id'], d['@flag'], d['@test'], d['#text'])
          #       tsv.append(record)
          #   except Exception:
          #     pass
          # # elif isinstance(rules, list):
          #   for rule in rules:
          #     try:
          #       ct = rule['@context']
          #       d = rule['sch:assert']
          #       if isinstance(d, list):
          #         for v in d:
          #           record = setup_record(ct, v['@id'], v['@flag'], v['@test'], v['#text'])
          #           tsv.append(record)
          #       elif isinstance(d, dict):
          #         record = setup_record(ct, d['@id'], d['@flag'], d['@test'], d['#text'])
          #         tsv.append(record)
          #     except Exception:
          #       pass
    # return tsv

if __name__ == '__main__':
  # Create the parser
  parser = argparse.ArgumentParser(prog='invoice2tsv',
                                  usage='%(prog)s [options] infile -o outfile',
                                  description='電子インボイスXMLファイルをTSVファイルに変換')
  # Add the arguments
  parser.add_argument('inFile', metavar='infile', type=str, help='入力XMLファイル')
  parser.add_argument('-o', '--out')
  parser.add_argument('-v', '--verbose', action='store_true')
  args = parser.parse_args()
  in_file = file_path(args.inFile)
  pre, ext = os.path.splitext(in_file)
  tmp_file = pre + '.tmp'
  if args.out:
    out_file = file_path(args.out)
  else:
    out_file = pre + '.tsv'
  verbose = args.verbose
  # Check if infile exists
  if not os.path.isfile(in_file):
    print('入力ファイルがありません')
    sys.exit()
  if verbose:
    print('** START ** ', __file__)

  tree = ET.parse(in_file)
  root = tree.getroot()
  dic = etree_to_dict(root)

  dicJson = json.dumps(dic)
  dicJson = re.sub('{' + ns[''] + '}', '', dicJson)
  dicJson = re.sub('{' + ns['cac'] + '}', 'cac:', dicJson)
  dicJson = re.sub('{' + ns['cbc'] + '}', 'cbc:', dicJson)
  dicJson = re.sub('{' + ns['sch'] + '}', 'sch:', dicJson)
  dic2 = json.loads(dicJson)

  tsv = []
  dict_to_tsv(tsv, dic2)

  with open(out_file, 'w') as f:
    writer = csv.writer(f, delimiter='\t')
    for record in tsv:
      writer.writerow(record)