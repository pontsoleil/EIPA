#!/bin/sh

######################################################################
#
# MOJIHAME-L - Insert Words In Input Data Into The Template File
#              (Line Mode)
#
# USAGE: mojihame [-l<label>] [-d[<string>]] <template> <data>
#
#        <template> . Template file should be inserted into
#        <data> ..... Source data file should be inserted
#        -d<string> . Set the symbol string which is regarded as an empty
#                     string. (default: "@")
#                     If "-dNULL" is set and one of the 2nd field string
#                     is "NULL", the macro "%2" will be replaced "" instead
#                     of "NULL".
#        -l<label> .. Set the border string of the mojihame paragraph
#                     (see below)
#
#        * mojihame mode:
#          This command has the following mode.
#          "line mode" ...... Replace the macro string "%n"s only in the
#                             paragraph which are between the lines <label>
#                             contain. And duplicate the paragraph by the
#                             number of source data lines.
#
#        * strings for escaping:
#          The following strings which are in fileds of source data are
#          used for escaping.
#            "_" ........ This letter is used to express the space " ".
#                         For instance, "I_am" will be unescaped to "I am"
#                         when replacing "%n" into it.
#            "\_" ....... This string is used to express the underscore "_".
#                         For instance, "\_ABC" will be unescaped to "_ABC"
#                         when replacing "%n" into it.
#            "\\" ....... This string is used to express the backslash.
#                         For instance, "\\n" will be unescaped to "\n"
#                         when replacing "%n" into it.
#            "@" or <string> which follows "-d" option when the option used
#                         This string is used to express the empty string "".
#                         See -d option for detail.
#
# Designed originally by Nobuaki Tounaka
# Written by Shell-Shoccar Japan (@shellshoccarjpn) on 2017-07-18
#
# This is a public-domain software (CC0). It means that all of the
# people can use this for any purposes with no restrictions at all.
# By the way, we are fed up with the side effects which are brought
# about by the major licenses.
#
######################################################################


######################################################################
# Initial Configuration
######################################################################

# === Initialize shell environment ===================================
set -u
umask 0022
export LC_ALL=C
type command >/dev/null 2>&1 && type getconf >/dev/null 2>&1 &&
export PATH="$(command -p getconf PATH)${PATH+:}${PATH-}"
export UNIX_STD=2003  # to make HP-UX conform to POSIX

# === Define the functions for printing usage and error message ======
print_usage_and_exit () {
  cat <<-USAGE 1>&2
	Usage   : ${0##*/} [-l<label>] [-d[<string>]] <template> <data>
	Args    : <template> . Template file should be inserted into
	          <data> ..... Source data file should be inserted
	Options : -d<string> . Set the symbol string which is regarded as an empty
	                       string. (default: "@")
	                       If "-dNULL" is set and one of the 2nd field string
	                       is "NULL", the macro "%2" will be replaced "" instead
	                       of "NULL".
	          -l<label> .. Set the border string of the mojihame paragraph
	Version : 2017-07-18 02:39:39 JST
	        : Open usp Tukubai (POSIX.1 Bourne Shell/POSIX.1 commands)
	USAGE
  exit 1
}
error_exit() {
  ${2+:} false && echo "${0##*/}: $2" 1>&2
  exit $1
}

# === Check whether the AWK on this host support length() or not =====
case "$(awk 'BEGIN{a[3]=3;a[4]=4;print length(a)}' 2>/dev/null)" in
  2) arlen='length';;
  *) arlen='arlen' ;; # use an equivalent original function if not supported
esac


######################################################################
# Parse Arguments
######################################################################

# === Get the options and the filepath ===============================
# --- initialize option parameters -----------------------------------
label=''
asnull='@'
file_tmpl=''; tmplfromF=''; tmplfrom0='#'
file_data=''; datafromF=''; datafrom0='#'
#
# --- get them -------------------------------------------------------
case $# in [01]) print_usage_and_exit;; esac
optmode=''
i=0
for arg in "$@"; do
  i=$((i+1))
  if [ $i -eq $# ]; then
    [ -z "$optmode" ] || print_usage_and_exit
    if [ -n "$file_tmpl" ]; then
      file_data=$arg
    else
      file_tmpl=$arg
    fi
    break
  fi
  if [ -z "$optmode" ]; then
    if   [ "_$arg" != "_${arg#-l}" ]; then
      label=${arg#-l}
    elif [ "_$arg" != "_${arg#-d}" ]; then
      asnull=${arg#-d}
    elif [ $i -eq $(($#-1)) ]; then
      file_tmpl=$arg; continue;
    else
      print_usage_and_exit
    fi
  else
    print_usage_and_exit
  fi
done

# === Validate the arguments =========================================
[ -n "$file_tmpl" ] || print_usage_and_exit
use_stdin=0
if   [ "_$file_tmpl" = '_'                ] ||
     [ "_$file_tmpl" = '_-'               ] ||
     [ "_$file_tmpl" = '_/dev/stdin'      ] ||
     [ "_$file_tmpl" = '_/dev/fd/0'       ] ||
     [ "_$file_tmpl" = '_/proc/self/fd/0' ]  ; then
  use_stdin=$((use_stdin+1))
  file_tmpl=''; tmplfromF='#'; tmplfrom0=''
elif [ -f "$file_tmpl"                    ] ||
     [ -c "$file_tmpl"                    ] ||
     [ -p "$file_tmpl"                    ]  ; then
  [ -r "$file_tmpl" ] || error_exit 1 'Cannot open the file: '"$file_tmpl"
  case "$file_tmpl" in /*|./*|../*) :;; *) file_tmpl="./$file_tmpl";; esac
else
  print_usage_and_exit
fi
if   [ "_$file_data"  = '_'                ] ||
     [ "_$file_data"  = '_-'               ] ||
     [ "_$file_data"  = '_/dev/stdin'      ] ||
     [ "_$file_data"  = '_/dev/fd/0'       ] ||
     [ "_$file_data"  = '_/proc/self/fd/0' ]  ; then
  use_stdin=$((use_stdin+1))
  file_data=''; datafromF='#'; datafrom0=''
elif [ -f "$file_data"                     ] ||
     [ -c "$file_data"                     ] ||
     [ -p "$file_data"                     ]  ; then
  [ -r "$file_data" ] || error_exit 1 'Cannot open the file: '"$file_data"
  case "$file_data" in /*|./*|../*) :;; *) file_data="./$file_data";; esac
else
  print_usage_and_exit
fi
[ $use_stdin -gt 1 ] && error_exit 1 'Not allowed to open STDIN more than once'


######################################################################
# Main Routine
######################################################################

export v1=$file_tmpl
export v2=$file_data
export v3=$label
export v4=$asnull
exec awk '
# the alternative length function for array variable
function arlen(ar,i,l){for(i in ar){l++;}return l;}

BEGIN {
  # ===== Initalize ==================================================
  #
  OFS="";
  ORS="";
  file_tmpl = ENVIRON["v1"];
  file_data = ENVIRON["v2"];
  label     = ENVIRON["v3"];
  asnull    = ENVIRON["v4"];
  split("", line_buf);

  # ===== Pass through the lines until the line contains the 1st label
  #
  if (label != "") {
    '"$tmplfromF"'while (getline line < file_tmpl) {
    '"$tmplfrom0"'while (getline line            ) {
      if (index(line, label)) {break;}
      print line, "\n";
    }
  }

  # ===== mojihame until the line contains the 2nd label =============
  #
  # --- 1) memorize the template lines between the labels ------------
  '"$tmplfromF"'for (i=0; (getline line < file_tmpl); i++) {
  '"$tmplfrom0"'for (i=0; (getline line            ); i++) {
    if ((label!="") && index(line, label)) {break;}
    line_buf[i] = line;
  }
  #
  # --- 2) mojihame every line in data to the memorized template -----
  '"$datafromF"'while (getline < file_data) {
  '"$datafrom0"'while (getline            ) {
    split("", data_buf);
    for (i=1; i<=NF; i++) {
      s = $i;
      if (s == asnull) {
        s = "";
      } else {
        gsub(/\\\\/, "\n" , s); # The Rule of Premutation
        gsub(/\\_/ , "\t" , s); # -----------------------
        gsub(/_/   , " "  , s); #   "_"    ->   " "
        gsub(/\t/  , "_"  , s); #   "\_"   ->   "_"
        gsub(/\\t/ , "\tt", s); #
        gsub(/\\n/ , "\tn", s); #
        gsub(/\n/  , "\\" , s); #   "\\"   ->   "\"
        gsub(/\tn/ , "\n" , s); #   "\n"   ->   "<LF>"
        gsub(/\tt/ , "\t" , s); #   "\t"   ->   "<TAB>"
      }
      data_buf[i] = s;
    }
    for (i=0; i<'$arlen'(line_buf); i++) {
      #
      # --- scan the all of "%n" in a line
      line = line_buf[i];
      while (match(line,/%[0-9]+/)) {
        print substr(line, 1, RSTART-1);
        fieldnum = substr(line, RSTART+1, RLENGTH-1);
        print (fieldnum in data_buf) ? data_buf[fieldnum] : "%" fieldnum;
        line = substr(line, RSTART+RLENGTH);
      }
      print line, "\n";
    }
  }

  # ===== Pass through the lines again ===============================
  #
  '"$tmplfromF"'while (getline line < file_tmpl) {
  '"$tmplfrom0"'while (getline line            ) {
    print line, "\n";
  }

}
'
