#!/bin/sh

######################################################################
#
# MIME-READ - A MIME Data Decoder Which Is Uploaded Onto Web Server
#
# USAGE: mime-read [-v] <name> <MIME-file>
#
#        <MIME-file>
#           .... MIME data file
#        -v .... Just lists the names which are contained in the MIME data
#
# Designed originally by Nobuaki Tounaka
# Written by Shell-Shoccar Japan (@shellshoccarjpn) on 2018-09-13
#
# This is a public-domain software (CC0). It means that all of the
# people can use this for any purposes with no restrictions at all.
# By the way, we are fed up with the side effects which are brought
# about by the major licenses.
#
######################################################################


######################################################################
# Initial Configuration
######################################################################

# === Initialize shell environment ===================================
set -u
umask 0022
export LC_ALL=C
type command >/dev/null 2>&1 && type getconf >/dev/null 2>&1 &&
export PATH="$(command -p getconf PATH)${PATH+:}${PATH-}"
export UNIX_STD=2003  # to make HP-UX conform to POSIX

# === Define the functions for printing usage and error message ======
print_usage_and_exit () {
  cat <<-USAGE 1>&2
	Usage   : ${0##*/} [-v] <name> <MIME-file>
	Args    : <MIME-file> .. MIME data file
	Options : -v .... Just lists the names which are contained in the MIME data
	Version : 2018-09-13 01:11:23 JST
	          Open usp Tukubai (POSIX Bourne Shell/POSIX commands)
	            * Although GNU AWK produces better performance than the
	              other AWKs
	USAGE
  exit 1
}
error_exit() {
  ${2+:} false && echo "${0##*/}: $2" 1>&2
  exit $1
}

# === Define some chrs. to escape some special chrs. temporarily =====
LFs=$(printf '\\\n_');LFs=${LFs%_} # Use as a "\n" in s-command of sed


######################################################################
# Parse Arguments
######################################################################

# === Print usage and exit when no options is given ==================
case $# in 0) print_usage_and_exit;; esac

# === Get the options and the filepath ===============================
# --- initialize option parameters -----------------------------------
vopt='#'       # enable codes when "-v" is set
novopt=''      # enable codes when "-v" is not set
name=''
mime_file=''
#
# --- get them -------------------------------------------------------
case $1 in
  '-v') vopt=''
        novopt='#'
        shift
        case $# in
          0) mime_file='-'       ;;
          1) mime_file=$1        ;;
          *) print_usage_and_exit;;
        esac
        ;;
     *) case $# in
          1) name=$1; mime_file='-';;
          2) name=$1; mime_file=$2 ;;
          *) print_usage_and_exit ;;
        esac
        ;;
esac

# === Validate the arguments =========================================
use_stdin=0
if   [ "_$mime_file" = '_'                ] ||
     [ "_$mime_file" = '_-'               ] ||
     [ "_$mime_file" = '_/dev/stdin'      ] ||
     [ "_$mime_file" = '_/dev/fd/0'       ] ||
     [ "_$mime_file" = '_/proc/self/fd/0' ]  ; then
  use_stdin=$((use_stdin+1))
  mime_file=''
elif [ -f "$mime_file"                    ] ||
     [ -c "$mime_file"                    ] ||
     [ -p "$mime_file"                    ]  ; then
  [ -r "$mime_file" ] || error_exit 1 'Cannot open the file: '"$mime_file"
else
  print_usage_and_exit
fi
case "$mime_file" in ''|-|/*|./*|../*) :;; *) mime_file="./$mime_file";; esac


######################################################################
# Prepare for the Main Routine
######################################################################

# === Define some functions ==========================================
# --- FUNC : remove the temporary file before exiting ----------------
tmpfiles=''
exit_trap() {
  set -- ${1:-} $?  # $? is set as $1 if no argument given
  trap '-' EXIT HUP INT QUIT PIPE ALRM TERM
  rm -f ${tmpfiles:-}
  exit $1
}
# --- FUNC : the alternative of the which command --------------------
which which >/dev/null 2>&1 || {
  which() {
    command -v "$1" 2>/dev/null | grep '^/' || {
      echo 'which: not found' 1>&2 && (exit 1)
    }
  }
}
# --- FUNC : the alternative of the "mktemp -t" ----------------------
mktempf0() {
  # --- parameters, etc.
  num_of_digits=16  # Length of Random String
  n=10              # Max Times of Retrying
  chrs='0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_'
                    # Available letters
  # --- call built-in mktemp if exists
  type mktemp >/dev/null 2>&1 && {
    mktemp -t tmp.${0##*/}.$$.XXXXXXXXXXXXXXXX
    return $?
  }
  # --- set the temporary directory
  Dir_tmp=$(set | grep -q ^TMPDIR= | sed 's/^[^=]\{1,\}=//');
  case "$Dir_tmp" in
    '') Dir_tmp='/tmp'      ;;
    /)  Dir_tmp=''          ;;
    *)  Dir_tmp=${Dir_tmp%/};;
  esac
  # --- mktemp loop
  while [ $n -ge 0 ]; do
    # --- Generate Ramdom string
    # calculate the number of words which required
    nw=$(echo "${num_of_digits}*l(${#chrs})/11.09+1" | # 11.09=ln(65536)
         bc -l                                       |
         sed 's/\..*$//'                             )
    # make a random hexadecimal digit
    if [ -c /dev/urandom ]; then
      hstr=$(dd if=/dev/urandom bs=2 count=$nw 2>/dev/null |
             od -A n -t x2 -v                              |
             tr 'abcdef ' 'ABCDEF\n'                       |
             tr -Cd 0123456789ABCDEF                       )
    else
      hstr=$( (ps -Ao pid,etime,pcpu,vsz; date)         |
             od -t d4 -A n -v                           |
             sed 's/[^0-9]\{1,\}/'"$LFs"'/g'            |
             grep '[0-9]'                               |
             tail -n 42                                 |
             sed 's/.*\(.\{8\}\)$/\1/g'                 |
             awk 'BEGIN{a=-2147483648;}                 #
                       {a+=$1;        }                 #
                  END  {                                #
                    srand(a);                           #
                    for(i=0;i<'$nw';i++){               #
                      printf("%02X",int(rand()*65536)); #
                    }                                   #
                  }'                                    )
    fi
    # make a random string from the hexadecimal digit
    s=$(echo "obase=${#chrs};ibase=16;$hstr"                     |
        bc                                                       |
        tr -d '\\\n'                                             |
        tr ' ' '\n'                                              |
        awk 'BEGIN  {for(i=1;i<'$num_of_digits';i++){print 0;}}  #
             /[0-9]/{print;                                   }' |
        awk 'BEGIN  {ORS="";                                     #
                     s="'"$chrs"'";                              #
                     for(i=0;i<length(s);i++){                   #
                       c[i]=substr(s,i+1,1);                     #
                     }                        }                  #
             /[0-9]/{print c[$0*1];           }'                 |
        tail -c $num_of_digits                                   )
    # --- Making the file path
    Path_target="${Dir_tmp}/tmp.${0##*/}.$$.$s"
    # --- Making the file
    (set -C; umask 177; : > "$Path_target") 2>/dev/null || {
      [ -f "$Path_target" ] && { n=$((n-1)); continue; }
      n=-1; break;
    }
    break
  done
  # --- print error message when failed to make a file
  case "$n" in -1) return 1;; esac
  # --- print the path of the file
  printf '%s\n' "$Path_target"
  # --- return successfully
  return 0
}
# --- FUNC : make_temp_file ------------------------------------------
make_temp_file () {
  trap 'exit_trap' EXIT HUP INT QUIT PIPE ALRM TERM
  tmpfile=$(mktempf0) || error_exit 1 'Cannot create a temporary file'
  tmpfiles="$tmpfiles $tmpfile"
}

# === Define which AWK command and its function are used =============
# --- Does this host have a "binarable" AWK command? -----------------
binarable_awk=1
while :; do
  CMD_AWK=$(which gawk 2>/dev/null)
  case $? in 0) break;; esac
  CMD_AWK=$(which awk 2>/dev/null)
  case $($CMD_AWK 'BEGIN{print length("\000")}') in 1) break;; esac
  binarable_awk=0; break
done
nobawk=''        # enable codes when the binarable is not available
novoptnobawk='#' # enable codes when the binarable is not available and
                 # "-v" option is not set
case $binarable_awk in
  0) nobawk='#'
     case "$novopt" in '') novoptnobawk='';; esac
     ;;
esac
# --- decide whether to use the alternative length or not ------------
case "$("$CMD_AWK" 'BEGIN{a[3]=3;a[4]=4;print length(a)}' 2>/dev/null)" in
  2) arlen='length';;
  *) arlen='arlen' ;; # use an equivalent original function if not supported
esac


# === Generate the AWK code for mime-read operation ==================
awk_code='
# the alternative length function for array variable
function arlen(ar,i,l){for(i in ar){l++;}return l;}

BEGIN {
  OFS = ""  ;
  ORS = ""  ;
  _assert_exit = 0;

  dlm = "/";

  wantedname = ENVIRON["v1"];
  wantedfile = "";
  if (match(wantedname,/".*"$/)) {
    wantedfile = substr(wantedname, RSTART, RLENGTH);
    wantedname = substr(wantedname, 1, RSTART-1);
  }
  split(wantedname, array, dlm);
  wantedname = "";
  for (i=1; i<='$arlen'(array); i++) {
    s = array[i];
    if (match(array[i], /\[[0-9]+\]$/)) {
      s  = substr(array[i], RSTART+1, RLENGTH-2);
      s *= 1;
      s  = substr(array[i], 1, RSTART) s "]";
    } else {
      s  = array[i] "[1]";
    }
    wantedname = (i == 1) ? s : wantedname dlm s;
  }

  status = 0;             #  0:in-header
                          #  1:in-header(wanted name has found)
                          # 10:in-body(other)
                          # 11:in-body(wanted)

  getline line;
  if (!match(line, /^--/)) {
    _assert_exit = 1;
    exit _assert_exit;
  }
  '$vopt'numofboundaries = 1;
  depth = 0;              # 1 is the top layer
  boundary = substr(line, 3, length(line)-3);
                          # not include the top 2 letters "--" and the tail CR
  down_to_the_child();

  while (getline line) {
    # A. the LF terminated line (not CR+LF)
    #    -> must be in body
    if (! match(line, /\r$/)) {
      if (status == 11) {
        '$novopt$nobawk'print prefix, line;
        '$novopt$nobawk'prefix = "\n";
      }
    # B. the CR+LF terminated and status==11 line
    #    -> must be in body (wanted)
    } else if (status == 11) {
      if (       line == boundstr1[depth]) {
        '$novoptnobawk'print NR;
        '$novopt'exit;
        # transfer to the next header
        status =  0;
        '$vopt'numofboundaries++;
      } else if (line == boundstr2[depth]) {
        '$novoptnobawk'print NR;
        '$novopt'exit;
        up_to_the_parent();
        status = 10;
      } else {
        '$novopt$nobawk'print prefix, substr(line, 1, length(line)-1);
        '$novopt$nobawk'prefix = "\r\n";
      }
    # C. the CR+LF terminated and status==10 line
    #     -> must be in body (not wanted)
    } else if (status == 10) {
      if (       line == boundstr1[depth]) {
        # transfer to the next header
        status = 0;
        '$vopt'numofboundaries++;
      } else if (line == boundstr2[depth]) {
        up_to_the_parent();
      }
    # D. the other CR+LF terminated line
    #    -> must be in header
    } else if (status < 10) {
      line = substr(line, 1, length(line)-1);
      linel = tolower(line)
      # D1. Content-Disposition header
      #     -> gathering the name and filename info
      if (match(linel, /^content-disposition:[  ]*/)) {
        pline  = " " substr(line , RSTART+RLENGTH);
        plinel = " " substr(linel, RSTART+RLENGTH);
        formname = "";
        if (       match(plinel,/[^a-z]name="/     )) {
          formname = substr(pline, RSTART+RLENGTH);
          if (match(formname,/"/    )) {
            formname = substr(formname, 1, RSTART-1);
          }
        } else if (match(plinel,/[^a-z]name='"'"'/ )) {
          formname = substr(pline, RSTART+RLENGTH);
          if (match(formname,/'"'"'/)) {
            formname = substr(formname, 1, RSTART-1);
          }
        } else if (match(plinel,/[^a-z]name=/      )) {
          formname = substr(pline, RSTART+RLENGTH);
          if (match(formname,/[   ]/)) {
            formname = substr(formname, 1, RSTART-1);
          }
        }
        filename = "";
        if (       match(plinel,/[^a-z]filename="/    )) {
          filename = substr(pline, RSTART+RLENGTH);
          if (match(filename,/"/    )) {
            filename = substr(filename, 1, RSTART-1);
          }
        } else if (match(plinel,/[^a-z]filename='"'"'/)) {
          filename = substr(pline, RSTART+RLENGTH);
          if (match(filename,/'"'"'/)) {
            filename = substr(filename, 1, RSTART-1);
          }
        } else if (match(plinel,/[^a-z]filename=/     )) {
          filename = substr(pline, RSTART+RLENGTH);
          if (match(filename,/[   ]/)) {
            filename = substr(filename, 1, RSTART-1);
          }
        }
        if (!index(namebros[depth],dlm formname dlm)) {
          namerept[depth dlm formname] = 0;
          namebros[depth]              = namebros[depth] formname dlm;
        }
        namerept[depth dlm formname]++;
        name[depth] = formname "[" namerept[depth dlm formname] "]";
        if (length(filename)) {
          name[depth] = name[depth] "\"" filename "\"";
        }
        # status=1 when the current name is same as the wanted one
        s = "";
        for (i=1; i<=depth; i++) {
          s = (i==1) ? name[i] : s dlm name[i];
        }
        if (length(wantedfile) > 2) {
          match(s, /\[[0-9]+\]"/);
          s = substr(s, 1, RSTART-1) substr(s, RSTART+RLENGTH-1);
          match(wantedname, /\[[0-9]+\]$/);
          status = (s == substr(wantedname,1,RSTART-1) wantedfile) ? 1 : 0;
        } else {
          if (match(s,/\[[0-9]+\]"/)) {
            s = substr(s, 1, RSTART+RLENGTH-2);
          }
          status = (s == wantedname) ? 1 : 0;
        }
      # D2. Content-Type: (multipart) header
      #     -> down to the child
      } else if (match(linel, /^content-type:[  ]*multipart\/[a-z]+/)) {
        pline  = " " substr(line , RSTART+RLENGTH);
        plinel = " " substr(linel, RSTART+RLENGTH);
        boundary = "";
        if (       match(plinel,/[^a-z]boundary="/    )) {
          boundary = substr(pline, RSTART+RLENGTH);
          if (match(boundary,/"/    )) {
            boundary = substr(boundary, 1, RSTART-1);
          }
        } else if (match(plinel,/[^a-z]boundary='"'"'/)) {
          boundary = substr(pline, RSTART+RLENGTH);
          if (match(boundary,/'"'"'/)) {
            boundary = substr(boundary, 1, RSTART-1);
          }
        } else if (match(plinel,/[^a-z]boundary=/     )) {
          boundary = substr(pline, RSTART+RLENGTH);
          if (match(boundary,/[   ]/)) {
            boundary = substr(boundary, 1, RSTART-1);
          }
        }
      # D3. Just CR+LF
      #      -> transfer the status to "in-body"
      } else if (! length(line)) {
        '$novopt'prefix = "";
        status += 10;
        if (length(boundary)) {
          down_to_the_child();
        }
        '$novoptnobawk'if (status==11) {print NR+1, ":";}
        continue;
      }
      # D4. Other headers
      #     -> do nothing
      '$vopt'print numofboundaries, " ", line, "\n";
    }
  }
}
END {
  if (_assert_exit) {
    print "'"${0##*/}"': This is not a MIME data", "\n" | "cat 1>&2";
    exit _assert_exit;
  }
}
function down_to_the_child() {
  # need to preset the variables
  # "depth" as the curret depth, and
  # "boundary" as the name of the child
  depth++;
  namebros[depth]  = dlm;
  boundstr1[depth] = "--" boundary "\r";
  boundstr2[depth] = "--" boundary "--\r";
  boundary         = "";
}
function up_to_the_parent() {
  if (depth in boundstr1) { delete boundstr1[depth]; }
  if (depth in boundstr2) { delete boundstr2[depth]; }
  if (depth in namebros) {
    split(substr(namebros[depth],2,length(namebros[depth])-2), array, dlm);
    for (i=1; i<='$arlen'(array); i++) {
      delete namerept[depth dlm array[i]];
    }
    split("", array);
    s = depth dlm;
    if (s in namerept) { delete namerept[s]; }
  }
  depth--;
}
'


######################################################################
# Main Routine
######################################################################

# === main (A) : GNU AWK available or -v option ======================
case "$novoptnobawk" in '#')
  exec env -i v1="$name" "$CMD_AWK" "$awk_code" "$mime_file"
  exit $?
  ;;
esac

# === main (B) : GNU AWK unavailable and without -v option ===========
# (commands should not be run with "exec" because of having to remove tempfiles)
case $use_stdin in [!0]*)
  make_temp_file
  cat > "$tmpfile"
  mime_file=$tmpfile
;; esac
st_ed_linenums=$(env v1="$name" "$CMD_AWK" "$awk_code" "$mime_file")
ret=$?
case $ret in 0) :;; *) exit_trap $ret;; esac
st_linenum=${st_ed_linenums%:*}
ed_linenum=${st_ed_linenums#*:}
case "$ed_linenum" in
  '') tail -n +$st_linenum "$mime_file"
      ;;
   *) make_temp_file
      outfile0=$tmpfile
      tail -n +$st_linenum "$mime_file"  |
      head -n $((ed_linenum-st_linenum)) > $outfile0
      ret=$?
      case $ret in 0) :;; *) exit_trap $ret;; esac
      # Cut the tail 2-byte (0x0D,0x0A) of the file
      n=$(ls -l $outfile0 | "$CMD_AWK" '{print $5-2}')
      dd if=$outfile0 bs=1 count=$n 2>/dev/null
      ;;
esac
exit_trap $?
