#!/bin/sh

######################################################################
#
# NAMEREAD - A Key-Value Format (Unicage "Name Format") Data Reader
#
# USAGE: nameread [options] <name> <name_file>
#
#        <name> ...... key name you want to get
#        <name_file> . Key-Value Format (Unicage "Name Format") text data file
#        -e .......... Regards <name> as a regexp (ERE) string
#        -l .......... Prints not only value but also key (=variable) name
#        -s<c> ....... Replaces all of the space " "s in value part of
#                      strings with <c>
#        -n<string> .. Gives <string> as the value if its value part of
#                      CGI variables is nothing
#
# Designed originally by Nobuaki Tounaka
# Written by Shell-Shoccar Japan (@shellshoccarjpn) on 2018-08-28
#
# This is a public-domain software (CC0). It means that all of the
# people can use this for any purposes with no restrictions at all.
# By the way, we are fed up with the side effects which are brought
# about by the major licenses.
#
######################################################################


######################################################################
# Initial Configuration
######################################################################

# === Initialize shell environment ===================================
set -u
umask 0022
export LC_ALL=C
type command >/dev/null 2>&1 && type getconf >/dev/null 2>&1 &&
export PATH="$(command -p getconf PATH)${PATH+:}${PATH-}"
export UNIX_STD=2003  # to make HP-UX conform to POSIX

# === Define the functions for printing usage and error message ======
print_usage_and_exit () {
  cat <<-USAGE 1>&2
	Usage   : ${0##*/} [options] <name> <name_file>
	Args    : <name> ...... key name you want to get
	          <name_file> . Key-Value Format (Unicage "Name Format") text data file
	Options : -e .......... Regards <name> as a regexp (ERE) string
	          -l .......... Prints not only value but also key (=variable) name
	          -s<c> ....... Replaces all of the space " "s in value part of
	                        strings with <c>
	          -n<string> .. Gives <string> as the value if its value part of
	                        CGI variables is nothing
	Version : 2018-08-28 01:38:48 JST
	          Open usp Tukubai (POSIX Bourne Shell/POSIX commands)
	USAGE
  exit 1
}
error_exit() {
  ${2+:} false && echo "${0##*/}: $2" 1>&2
  exit $1
}

# === Define some chrs. to escape some special chrs. temporarily =====
TAB=$(printf '\t')


######################################################################
# Parse Arguments
######################################################################

# === Get the options and the filepath ===============================
# --- initialize option parameters -----------------------------------
opts=''
opts_is_set=0
optn=''
opte_is_set=0
optl_is_set=0
name=''
name_file=''
#
# --- get them -------------------------------------------------------
[ $# -ge 1 ] || print_usage_and_exit
optmode=''
i=0
for arg in "$@"; do
  i=$((i+1))
  if [ -z "$optmode" ]; then
    case "$arg" in
      -[elnsdi]*)
        ret=$(echo "_${arg#-}" |
              awk '{
                e = "_";
                l = "_";
                n = "_";
                s = "_";
                opt_str = "";
                for (i=2;i<=length($0);i++) {
                  c = substr($0,i,1);
                  if         (c == "e")                {
                    e = "e";
                  } else if  (c == "l")                {
                    l = "l";
                  } else if ((c == "n") || (c == "i")) {
                    n = "n";
                    opt_str = substr($0,i+1);
                    break;
                  } else if ((c == "s") || (c == "d")) {
                    s = "s";
                    opt_str = substr($0,i+1);
                    break;
                  }
                }
                printf("%s%s%s%s %s",e,l,n,s,opt_str);
              }')
        ret1=${ret%% *}
        ret2=${ret#* }
        case "$ret1" in *e*) opte_is_set=1;; esac
        case "$ret1" in *l*) optl_is_set=1;; esac
        case "$ret1" in *n*) case "$ret2" in
                               '') optmode='n';;
                                *) optn=$ret2 ;;
                             esac
                             ;;
        esac
        case "$ret1" in *s*) opts=$ret2
                             opts_is_set=1
                             ;;
        esac
        ;;
      *)
        if [ -z "$name" ]; then
          [ $i -ge $(($#-1)) ] || print_usage_and_exit
          name=$arg
        elif [ -z "$name_file" ]; then
          [ $i -eq $# ] || print_usage_and_exit
          name_file=$arg
        else
          print_usage_and_exit
        fi
        ;;
    esac
  elif [ "$optmode" = 'n' ]; then
    optn=$arg
    optmode=''
  else
    print_usage_and_exit
  fi
done

# === Validate the arguments =========================================
case "$name" in '') print_usage_and_exit;; esac
if   [ "_$name_file" = '_'                ] ||
     [ "_$name_file" = '_-'               ] ||
     [ "_$name_file" = '_/dev/stdin'      ] ||
     [ "_$name_file" = '_/dev/fd/0'       ] ||
     [ "_$name_file" = '_/proc/self/fd/0' ]  ; then
  name_file=''
elif [ -f "$name_file"                    ] ||
     [ -c "$name_file"                    ] ||
     [ -p "$name_file"                    ]  ; then
  [ -r "$name_file" ] || error_exit 1 'Cannot open the file: '"$name_file"
else
  print_usage_and_exit
fi
case "$name_file" in ''|-|/*|./*|../*) :;; *) name_file="./$name_file";; esac


######################################################################
# Prepare for the Main Routine
######################################################################

# === Generate the AWK code for nameread operation ===================
awk_code='
BEGIN {
  opte_is_set = ENVIRON["opte_is_set"];
  optl_is_set = ENVIRON["optl_is_set"];
  optn        = ENVIRON["optn"       ];
  opts        = ENVIRON["opts"       ];
  opts_is_set = ENVIRON["opts_is_set"];
  target_name = ENVIRON["name"       ];
}
{
  i = index($0," ");
  name = (i > 1) ? $1 : (length($0)>0) ? $0 : "";
  if (opte_is_set == 0 && name != target_name) {
    next;
  }
  var = (i > 0) ? substr($0,i+1) : "";
  if (length(var) == 0 && length(optn)) {
    var = optn;
  } else if (opts_is_set != 0)  {
    s = "";
    while (match(var,/ /)) {
      s = s substr(var, 1, RSTART-1) opts;
      var = substr(var, RSTART+1);
    }
    var = s var;
  }
  if (optl_is_set) {
    print name, var;
  } else {
    print var;
  }
}
'


######################################################################
# Main Routine
######################################################################

case $opte_is_set in
  0) export   opte_is_set   optl_is_set   optn   opts opts_is_set   name
     exec awk "$awk_code" ${name_file:+"$name_file"}
     ;;
  *) case "${name#^}" in "$name") name="[^$TAB ]*${name}";;
                               *) name="${name#^}"       ;;
     esac
     case "${name#$}" in "$name") name="${name}[^$TAB ]*";;
                               *) name="${name%$}"       ;;
     esac
     export   opte_is_set   optl_is_set   optn   opts opts_is_set   name
     grep -E "^${name}([$TAB ]+.*\$|\$)" ${name_file:+"$name_file"} |
     exec awk "$awk_code"
     ;;
esac
