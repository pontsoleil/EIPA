#!/bin/sh
 
######################################################################
#
# NAME-CGI - HTTP POST String Generator
#
# USAGE: name-cgi <file> [file...]
# ARGS : file
#          A source file for you want to convert into HTTP POST string.
#          The required format is
#            <variable_name#1> <value#1>
#            <variable_name#2> <value#2>
#                    :            :
#          * <variablename> and <value> is separated by only one space.
#            And <value> can have space characters.
#          * backslashes in <value> must be escaped as '\\'.
#            And <value> can have LF characters as '\n'.
# RET  : $?=0 (when all of the arguments are valid)
#        stdout ... encoded CGI variables for HTTP POST(GET)
#                   LF will NOT be added at the end of string
#
# Written by Shell-Shoccar Japan (@shellshoccarjpn) on 2018-08-29
#
# This is a public-domain software (CC0). It means that all of the
# people can use this for any purposes with no restrictions at all.
# By the way, We are fed up with the side effects which are brought
# about by the major licenses.
#
######################################################################


######################################################################
# Initial Configuration
######################################################################

# === Initialize shell environment ===================================
set -u
umask 0022
export LC_ALL=C
type command >/dev/null 2>&1 && type getconf >/dev/null 2>&1 &&
type command >/dev/null 2>&1 && type getconf >/dev/null 2>&1 &&
export PATH="$(command -p getconf PATH)${PATH+:}${PATH-}"
export UNIX_STD=2003  # to make HP-UX conform to POSIX

# === Define the functions for printing usage and error message ======
print_usage_and_exit () {
  cat <<-USAGE 1>&2
	Usage   : ${0##*/} <file> [file...]
	Argument: file
	            A source file for you want to convert into HTTP POST string.
	            The required format is
	              <variable_name#1> <value#1>
	              <variable_name#2> <value#2>
	                      :            :
	            * <variablename> and <value> is separated by only one space.
	              And <value> can have space characters.
	            * backslashes in <value> must be escaped as '\\'.
	              And <value> can have LF characters as '\n'.
	Return  : \$? ....... 0 when all of the arguments are valid
	          stdout ... encoded CGI variables for HTTP POST(GET)
	                     LF will NOT be added at the end of string
	Version : 2018-08-29 15:53:56 JST
	USAGE
  exit 1
}
error_exit() {
  ${2+:} false && echo "${0##*/}: $2" 1>&2
  exit $1
}


######################################################################
# Argument Parsing
######################################################################

# === Print usage and exit if one of the help options is set =========
case "$# ${1:-}" in
  '1 -h'|'1 --help'|'1 --version') print_usage_and_exit;;
esac

# === Set "-" into the 1st argument if no argument is given ==========
case $# in 0) set -- -;; esac


######################################################################
# Main Routine
######################################################################

use_stdin=0
for file in "$@"; do                                               #
  if   [ "_$file" = '_'                ] ||                        #
       [ "_$file" = '_-'               ] ||                        #
       [ "_$file" = '_/dev/stdin'      ] ||                        #
       [ "_$file" = '_/dev/fd/0'       ] ||                        #
       [ "_$file" = '_/proc/self/fd/0' ]  ; then                   #
    use_stdin=$((use_stdin+1))                                     #
    [ $use_stdin -le 1 ] || {                                      #
      error_exit 1 'stdin cannot be opend only once: '"$file"      #
    }                                                              #
    file=''                                                        #
  elif [ -f "$file"                    ] ||                        #
       [ -c "$file"                    ] ||                        #
       [ -p "$file"                    ]  ; then                   #
    [ -r "$file" ] || error_exit 1 'Cannot open the file: '"$file" #
  else                                                             #
    print_usage_and_exit                                           #
    case "$file" in /*|./*|../*) :;; *) file="./$file";; esac      #
  fi                                                               #
  grep '' ${file:+"$file"}                                         #
done                                                               |
awk '                                                              #
  BEGIN {                                                          #
    # --- prepare                                                  #
    OFS = "";                                                      #
    ORS = "";                                                      #
    # --- prepare str2url                                          #
    for(i= 0;i<256;i++){c2a[sprintf("%c",i)]=sprintf("%%%02X",i);} #
    c2a[" "]="+";                                                  #
    for(i=48;i< 58;i++){c2a[sprintf("%c",i)]=sprintf("%c",i);   }  #
    for(i=65;i< 91;i++){c2a[sprintf("%c",i)]=sprintf("%c",i);   }  #
    for(i=97;i<123;i++){c2a[sprintf("%c",i)]=sprintf("%c",i);   }  #
    c2a["-"]="-"; c2a["."]="."; c2a["_"]="_"; c2a["~"]="~";        #
    # --- first delemiter                                          #
    dlm = "";                                                      #
  }                                                                #
  {                                                                #
    # --- get the name and value --------------------------------- #
    i = length($0);                                                #
    j = index($0, " ");                                            #
    if (i == 0) { next; }                                          #
    if        (j == 0) {                                           #
      name  = $0;                                                  #
      value = "";                                                  #
    } else if (i == j) {                                           #
      name  = substr($0,   1, i-1);                                #
      value = "";                                                  #
    } else             {                                           #
      name  = substr($0,   1, j-1);                                #
      value = substr($0, j+1     );                                #
    }                                                              #
    # --- unescape the value ------------------------------------- #
    gsub(/\\n/ , "\n", value);                                     #
    gsub(/\\\\/, "\\", value);                                     #
    # --- URL encode --------------------------------------------- #
    enc_value = "";                                                #
    for(i=1; i<=length(value); i++) {                              #
      enc_value = enc_value c2a[substr(value,i,1)];                #
    }                                                              #
    # --- print -------------------------------------------------- #
    print dlm, name, "=", enc_value;                               #
    # --- set delemiter ------------------------------------------ #
    dlm = "&";                                                     #
  }                                                                #
'
