#!/usr/bin/env python3
#coding: utf-8
#
# transpose row and column of inpu file and write result to output file
# 
# designed by SAMBUICHI, Nobuyuki (Nobu)
# written by SAMBUICHI, Nobuyuki (Nobu)
#
# MIT License
# 
# Copyright (c) 2021 SAMBUICHI Nobuyuki
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
import pandas as pd
import os
import sys
import argparse

def file_path(pathname):
  if '/' == pathname[0:1]:
    return pathname
  else:
    dir = os.path.dirname(__file__)
    new_path = os.path.join(dir, pathname)
    return new_path

#
#メイン関数
#
if __name__ == '__main__':
  # Create the parser
  parser = argparse.ArgumentParser(prog='tateyoko',
                                  usage='%(prog)s [options] infile outfile',
                                  description='入力ファイルの縦と横を変換')
  # Add the arguments
  parser.add_argument('inFile', metavar='infile', type=str, help='入力XMLファイル')
  parser.add_argument('outFile', metavar='outfile', type=str, help='出力ファイル')
  parser.add_argument('-v', '--verbose', action='store_true')
  args = parser.parse_args()
  in_file = file_path(args.inFile)
  out_file = file_path(args.outFile)
  verbose = args.verbose
  # Check if infile exists
  if not os.path.isfile(in_file):
    print('入力ファイルがありません')
    sys.exit()

  df = pd.read_csv(in_file, sep='\t', encoding='Shift-JIS',
                    header=None, index_col=0,  # na_values=[''], keep_default_na=False
                  )
  # df = df.dropna(thresh=6)
  df = df.drop(df.columns[[0, 1, 2, 3, 4]], axis=1)
  df = df.transpose()
  df.to_csv(out_file, index=False, sep='\t', encoding='UTF-8')