#!/usr/bin/env python3
#coding: utf-8
#
# transpose row and column of inpu file and write result to output file
# 
# designed by SAMBUICHI, Nobuyuki (Sambuichi Professional Engineers Office)
# written by SAMBUICHI, Nobuyuki (Sambuichi Professional Engineers Office)
#
# MIT License
# 
# Copyright (c) 2021 SAMBUICHI Nobuyuki (Sambuichi Professional Engineers Office)
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
from collections import defaultdict
import pandas as pd
import csv
import os
import sys
import argparse

def file_path(pathname):
  if '/' == pathname[0:1]:
    return pathname
  else:
    dir = os.path.dirname(__file__)
    new_path = os.path.join(dir, pathname)
    return new_path

#
#メイン関数
#
if __name__ == '__main__':
  # Create the parser
  parser = argparse.ArgumentParser(prog='transpose',
                                  usage='%(prog)s [options] infile',
                                  description='入力ファイルの縦と横を変換')
  # Add the arguments
  parser.add_argument('inFile', metavar='infile', type=str, help='入力XMLファイル')
  parser.add_argument('-v', '--verbose', action='store_true')
  args = parser.parse_args()
  in_file = file_path(args.inFile)
  pre, ext = os.path.splitext(in_file)
  tmp_file = pre + '.tmp'
  out_file = pre + '.tsv'
  verbose = args.verbose
  # Check if infile exists
  if not os.path.isfile(in_file):
    print('入力ファイルがありません')
    sys.exit()

  records = []
  with open(in_file, encoding='Shift-JIS', newline='') as f:
    reader = csv.reader(f, delimiter='\t')
    row = 0
    for record in reader:
      hasData = False
      row += 1
      col = 0
      if row <= 4:
        records.append(record)
      elif row <= 6:
        pass
      else:
        for cell in record:
          col += 1
          if col > 8 and len(cell) > 0:
            hasData = True
        if hasData:
          records.append(record)

  with open(tmp_file, 'w') as f:
    writer = csv.writer(f, delimiter='\t')
    for record in records:
      writer.writerow(record)

  df = pd.read_csv(tmp_file, sep='\t', encoding='UTF-8', header=None, index_col=0)
  df = df.drop(df.columns[[0,1,2,3,4,5,6]], axis=1)
  df = df.transpose()
  # df = df.dropna(how='all', axis=1)
  df.to_csv(tmp_file, index=False, sep='\t', encoding='UTF-8')

  records = []
  with open(tmp_file, encoding='UTF-8', newline='') as f:
    reader = csv.reader(f, delimiter='\t')
    row = 0
    for record in reader:
      hasData = False
      row += 1
      col = 0
      if row <= 4:
        records.append(record)
      else:
        for cell in record:
          col += 1
          if col > 4 and len(cell) > 0:
            hasData = True
        if hasData:
          records.append(record)

  with open(out_file, 'w') as f:
    writer = csv.writer(f, delimiter='\t')
    for record in records:
      writer.writerow(record)

  os.remove(tmp_file)