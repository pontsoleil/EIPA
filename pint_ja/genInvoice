#!/usr/bin/env python3
#coding: utf-8
#
# generate Open Peoopl e-Invoice (UBL 2.1) fron TSV file
# 
# designed by SAMBUICHI, Nobuyuki (Sambuichi Professional Engineers Office)
# written by SAMBUICHI, Nobuyuki (Sambuichi Professional Engineers Office)
#
# MIT License
# 
# Copyright (c) 2021 SAMBUICHI Nobuyuki (Sambuichi Professional Engineers Office)
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
import xml.etree.ElementTree as ET
from collections import defaultdict
import csv
import re
import json
import sys 
import os
import argparse

from dic2etree import * 

Charges = {
  'ibg-21','ibt-099a','ibt-103a','ibt-105','ibt-104','ibt-101','ibt-099','ibt-099-1','ibt-100','ibt-100-1','ibt-102','ibt-103','ibt-103a',
  'ibg-28','ibt-141a','ibt-145','ibt-144','ibt-143','ibt-141','ibt-141-1','ibt-142','ibt-142-1','ibt-142a','ibt-142b','ibt-142c'
}

Allowances = {
  'ibg-20','ibt-092a','ibt-096a','ibt-098','ibt-097','ibt-094','ibt-092','ibt-092-1','ibt-093','ibt-093-1','ibt-095','ibt-096','ibt-096a',
  'ibg-27','ibt-136a','ibt-140','ibt-139','ibt-138','ibt-136','ibt-136-1','ibt-137','ibt-137-1','ibt-137a','ibt-138','ibt-137c',
  'ibt-147','ibt-147-1'
}

def clean_list(Dic):
  for k, v in Dic.items():
    if isinstance(v, dict):
      clean_list(v)
    elif isinstance(v, list):
      index = 0
      for l in v:
        if l == {}:
          index += 1
        elif isinstance(l, dict):
          clean_list(l)
      if index > 0:
        for i in range(index):
          v.pop(0) 

def file_path(pathname):
  if '/' == pathname[0:1]:
    return pathname
  else:
    dir = os.path.dirname(__file__)
    new_path = os.path.join(dir, pathname)
    return new_path

# ref https://stackoverflow.com/questions/15210148/get-parents-keys-from-nested-dictionary
# breadcrumb(json_dict_or_list, value)
def get_path_value(base, path):
  key = path[0]
  if isinstance(base, dict):
    if 1 == len(path):
      if key in base.keys():
        return {'k':key, 'v':base[key]}
    else:
      path.pop(0)
      for k, v in base.items():
        if isinstance(base, dict):
          if key == k:
            p = get_path_value(v, path)
            return p
  elif isinstance(base, list):
    try:
      key = int(key)
      if key < len(base):
        path.pop(0)
        p = get_path_value(base[key], path)
        return p
    except ValueError:
      pass

def set_path_value(base, path, value, datatype):
  if isinstance(base,str):
    return None
  key = path[0]
  if len(path) > 1:
    try:
      index = int(path[1])
      if not key in base:
        base[key] = {}
      if not isinstance(base[key], list):
        base[key] = [{}]
      else:
        pass
      if index >= len(base[key]):
        for i in range(index - len(base[key]) + 1):
          base[key].append({})
      try:
        base = base[key][index]
      except Exception:
        pass
      path.pop(0)
      path.pop(0)
      p = set_path_value(base, path, value, datatype)
      return p
    except ValueError:
      pass
  if isinstance(base, list):
    base = base[-1]
  if isinstance(base, dict):
    if 1 == len(path):
      if not key in base.keys():
        base[key] = {}
      if 'Amount' == datatype or 'Unit' == datatype:
        value = {'#text': str(value), '@currencyID': 'JPY'}
      elif 'Quantity' == datatype:
        value = {'#text': str(value), '@unitCode': 'EA'}
      base[key] = value  # when Amount/Unit/Quantity is already set
      return {'k':key, 'v':base[key]}
    elif '@' == path[1][:1]:
      if not key in base.keys():
        base[key] = {}
      if isinstance(base[key], str):
        v = base[key]
        base[key] = {}
        base[key]['#text'] = v
      base[key][path[1]] = value
      return {'k':key, 'v': base[key]}
    else:
      path.pop(0)
      if key in base.keys():
        if isinstance(base, dict):
          v = base[key]
        elif isinstance(base, list):
          v = base[key][-1]
      else:
        base[key] = {}
        v = base[key]
      p = set_path_value(v, path, value, datatype)
      return p

def set_record(Dic, header, record):
  base0 = dictXpath[record[0]] and dictXpath[record[0]]['xpath']
  base1 = dictXpath[record[2]] and dictXpath[record[2]]['xpath']
  base2 = dictXpath[record[4]] and dictXpath[record[4]]['xpath']
  seq0 = record[1]
  seq1 = record[3]
  seq2 = record[5]

  root = '/Invoice'
  if '' == base0 or '/' == base0:
    base = root
  else:
    base = base0

  base_path = base[1:].split('/')
  if seq0 and '-' != seq0 and '' != seq0 and '/Invoice' != base:
    try:
      base_path += [int(seq0)]
    except ValueError:
      pass
  if len(base1) > 0:
    baseList1 = re.sub(base, '', base1)[1:].split('/')
    base = base1
    base_path += baseList1
    if seq1 and '-' != seq1 and '' != seq1:
      try:
        base_path += [int(seq1)]
      except ValueError:
        pass
    if len(base2) > 0:
      baseList2 = re.sub(base, '', base2)[1:].split('/')
      base = base2
      base_path += baseList2
      if seq2 and '-' != seq2 and '' != seq2:
        try:
          base_path += [int(seq2)]
        except ValueError:
          pass
  print(base_path)
  N = 3 # column 0 ~ 3 for bough and twig
  n = 0
  for cell in record:  # traverse field in a record
    if n > N and cell:
      id = header[n]
      if id:
        _dictxpath = dictXpath[id]
        if _dictxpath:
          xpath = _dictxpath['xpath']
          if xpath:
            pathList = re.sub(base, '', xpath)[1:].split('/')
            path = base_path + pathList
            datatype = _dictxpath['datatype']
            set_path_value(Dic, path, cell, datatype)
    n += 1

if __name__ == '__main__':
  # Create the parser
  parser = argparse.ArgumentParser(prog='genInvoice',
                                  usage='%(prog)s [options] infile outfile',
                                  description='TSVファイルから電子インボイスXMLを作成')
  # Add the arguments
  parser.add_argument('inFile', metavar='infile', type=str, help='入力TSVファイル')
  parser.add_argument('-o', '--out')
  parser.add_argument('-e', '--encoding')  # 'Shift_JIS' 'cp932'
  parser.add_argument('-t', '--transpose', action='store_true')
  parser.add_argument('-v', '--verbose', action='store_true')
  args = parser.parse_args()
  in_file = file_path(args.inFile)
  pre, ext = os.path.splitext(in_file)
  tmp_file = pre+'.txt'
  if args.out:
    out_file = args.out.lstrip()
    out_file = file_path(out_file)
  else:
    out_file = pre+'.xml'
  encoding = args.encoding.lstrip()
  if not encoding:
    encoding = 'UTF-8'
  transpose = args.transpose
  verbose = args.verbose
  # Check if infile exists
  if not os.path.isfile(in_file):
    print('入力ファイルがありません')
    sys.exit()
  if verbose:
    print('** START ** ', __file__)

  # initialize globals
  Dic = defaultdict(type(''))
  Dic['Invoice'] = {}

  dictID = defaultdict(type(''))
  dictXpath = defaultdict(type(''))

  xpath_file = file_path('data/common/xpath.txt')
  if verbose:
    print(f'*** XPath file {xpath_file}')
  # SemanticSort paent ID Level BusinessTerm BusinessTermJP Card. DataType SyntaxSort xPath
  # 0            1     2  3     4            5              6     7        8          9
  COL_SemanticSort = 0
  COL_parent = 1
  COL_ID = 2
  COL_level = 3
  COL_BT = 4
  COL_BT_ja = 5
  COL_card = 6
  COL_datatype = 7
  COL_SyntaxSort = 8
  COL_xpath = 9
  parents = {}
  check = {''}
  with open(xpath_file, encoding='utf-8', newline='') as f0:
    reader = csv.reader(f0, delimiter='\t')
    header = next(reader)
    for v in reader:
      parent = v[COL_parent].strip()
      id = v[COL_ID].strip()
      if 'ibg-' in id:
        parents[id] = parent+'_'+id
      else:
        parents[id] = parent
      if id:
        xpath = v[COL_xpath]
        if len(v) > 7 and '/' in xpath:
          semanticSort = v[COL_SemanticSort]
          BT = v[COL_BT]
          BT_ja = v[COL_BT_ja]
          level = v[COL_level]
          card = v[COL_card].strip()
          datatype = v[COL_datatype]
          syntaxSort = v[COL_SyntaxSort]
          data = {'level':level,'parent':parent,'BT':BT,'BT_ja':BT_ja,'card':card,'datatype':datatype,'xpath':xpath }
          if xpath.count('/') > 1 and xpath in dictID:
            if dictID[xpath] != id or id in Charges or id in Allowances:
              if isinstance(dictID[xpath], str):
                dictID[xpath] = {dictID[xpath], id}
              else:
                dictID[xpath].add(id)
          else:
            if id in Charges or id in Allowances:
              dictID[xpath] = {id}
            dictID[xpath] = id
          dictXpath[id] = data
          if 'Amount' == datatype or 'Unit' == datatype:
            level = str(int(level)+1)
            xpath = xpath+'/@currencyID'
            if not xpath in dictID:
              data = {'id':id,'syntaxSort':syntaxSort,'level':level,'parent':parent,'BT':None,'card':None,'datatype':None,'xpath':xpath}
              check.add(json.dumps(data))
          elif 'Quantity' == datatype:
            level = str(int(level)+1)
            xpath = xpath+'/@unitCode'
            if not xpath in dictID:
              data = {'id':id,'syntaxSort':syntaxSort,'level':level,'parent':parent,'BT':None,'card':None,'datatype':None,'xpath':xpath}
              check.add(json.dumps(data))
    check_ = list(check)
    for data in check_:
      if not data:
        continue
      data_ = json.loads(data)
      if not data_:
        continue
      id = data_['id']
      xpath = data_['xpath']
      if not xpath in dictID:
        id = id+'-1'
        syntaxSort = data_['syntaxSort']
        dictID[xpath] = id
        dictXpath[id] = data

  if verbose:
    print(f'*** Input file {in_file}')
  if transpose:
    with open(in_file, encoding=encoding, newline='') as f:
      reader = csv.reader(f, delimiter='\t')
      rows = []
      for record in reader:
        row = [record[0]]+record[6:]
        rows.append(row)
    # see https://stackoverflow.com/questions/6473679/transpose-list-of-lists
    transposed_row = [list(i) for i in zip(*rows)]
    record = transposed_row[0]
    header = [record[0]]+record[2:4]+record[5:]
    for i in range(1,len(transposed_row)):
      record = transposed_row[i]
      row = [record[0]]+record[2:4]+record[5:]
      set_record(Dic, header, row)
  else:
    with open(in_file, encoding=encoding, newline='') as f:
      reader = csv.reader(f, delimiter='\t')
      header = next(reader)
      for record in reader:
        row = record[0:4]+record[6:]# column 0 ~ 3 for bough and twig 4,5 BG name for bough and twig
        set_record(Dic, header, record)

  clean_list(Dic)

  dicJson = json.dumps(Dic)
  dicJson = re.sub('"Invoice"', '"{' + ns[''] + '}Invoice"', dicJson)
  dicJson = re.sub('xsi:', '{' + ns['xsi'] + '}', dicJson)
  dicJson = re.sub('cac:', '{' + ns['cac'] + '}', dicJson)
  dicJson = re.sub('cbc:', '{' + ns['cbc'] + '}', dicJson)
  dicJson = re.sub('qdt:', '{' + ns['qdt'] + '}', dicJson)
  dicJson = re.sub('udt:', '{' + ns['udt'] + '}', dicJson)
  dicJson = re.sub('ccts:', '{' + ns['ccts'] + '}', dicJson)
  dic2 = json.loads(dicJson)

  root = ET.XML('''
  <Invoice 
    xmlns="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2" 
    xmlns:cac="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2" 
    xmlns:cbc="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2" 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xsi:schemaLocation="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2 http://docs.oasis-open.org/ubl/os-UBL-2.1/xsd/maindoc/UBL-Invoice-2.1.xsd" /> 
  ''')  # this step adds xsi:schemaLocation attribute
  tree = dict_to_etree(dic2, root)

  with open(out_file, 'wb') as f:
    t = ET.ElementTree(tree)
    t.write(f, encoding='UTF-8')

  if verbose:
    print(f'** END ** {out_file}')