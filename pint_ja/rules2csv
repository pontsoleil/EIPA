#!/usr/bin/env python3
#coding: utf-8
#
# generate TSV from XML Schematron
# 
# designed by SAMBUICHI, Nobuyuki (Sambuichi Professional Engineers Office)
# written by SAMBUICHI, Nobuyuki (Sambuichi Professional Engineers Office)
#
# MIT License
# 
# Copyright (c) 2021 SAMBUICHI Nobuyuki (Sambuichi Professional Engineers Office)
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
import xml.etree.ElementTree as ET
from collections import defaultdict
from operator import itemgetter
import csv
import re
import json
import sys 
import os
import argparse

from dic2etree import *

dictID = defaultdict(type(''))
dictXpath = defaultdict(type(''))

def file_path(pathname):
  if '/' == pathname[0:1]:
    return pathname
  else:
    dir = os.path.dirname(__file__)
    new_path = os.path.join(dir, pathname)
    return new_path
	
if __name__ == '__main__':
  # Create the parser
  parser = argparse.ArgumentParser(prog='rules2csv',
                                  usage='%(prog)s [options] infile -o outfile',
                                  description='ルールTSVから参照先のBTを取り出したSVファイル作成')
  # Add the arguments
  parser.add_argument('inFile', metavar='infile', type=str, help='入力XMLファイル')
  parser.add_argument('-o', '--out')
  parser.add_argument('-v', '--verbose', action='store_true')
  args = parser.parse_args()
  in_file = file_path(args.inFile)
  pre, ext = os.path.splitext(in_file)
  tmp_file = pre + '.tmp'
  if args.out:
    out_file = args.out.lstrip()
    out_file = file_path(out_file)
  else:
    out_file = pre + '.csv'
  verbose = args.verbose
  # Check if infile exists
  if not os.path.isfile(in_file):
    print('入力ファイルがありません')
    sys.exit()
  if verbose:
    print('** START ** ', __file__)

  csv_list = []
  keys = ('id','flag','message')
  with open(in_file,'r',encoding='utf-8') as f:
    reader = csv.DictReader(f,keys,delimiter='\t')
    header = next(reader)
    for row in reader:
      id = row['id'].strip()
      flag = row['flag'].strip()
      message = row['message'].strip()
      rules1 = re.findall(r'B[TG]-[0-9]+',message)
      rules2 = re.findall(r'B[TG]-[0-9]+-[0-9]?',message)
      rules3 = re.findall(r'(ib[tg]-[0-9]+)',message)
      rules4 = re.findall(r'(ib[tg]-[0-9]+-[0-9])',message)
      csv_list.append([id,flag,message]+[' '.join(rules1+rules2+rules3+rules4)])

  with open(out_file, 'w') as f:
    writer = csv.writer(f, delimiter=',')
    for record in csv_list:
      writer.writerow(record)

  if verbose:
    print(f'** END ** {out_file}')