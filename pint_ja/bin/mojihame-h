#!/bin/sh

######################################################################
#
# MOJIHAME-H - Insert Words In Input Data Into The Template File
#              (Hierarchy Mode)
#
# USAGE: mojihame -h<label> [-d[<string>]] <template> <data>
#
#        <template> . Template file should be inserted into
#        <data> ..... Source data file should be inserted
#        -d<string> . Set the symbol string which is regarded as an empty
#                     string. (default: "@")
#                     If "-dNULL" is set and one of the 2nd field string
#                     is "NULL", the macro "%2" will be replaced "" instead
#                     of "NULL".
#        -h<label> .. Change mojihame mode to "hierarchy mode" (see below)
#
#        * mojihame mode:
#          This command has the following mode.
#          "hierarchy mode" . It is the hierarchy supported version of
#                             the "line mode". (see mojihame-l)
#                             Duplicate the paragraph between "<label>-n"
#                             (n is the depth of the hierarchy) and replace
#                             its macro strings "%n" hierarchically.
#
#        * strings for escaping:
#          The following strings which are in fileds of source data are
#          used for escaping.
#            "_" ........ This letter is used to express the space " ".
#                         For instance, "I_am" will be unescaped to "I am"
#                         when replacing "%n" into it.
#            "\_" ....... This string is used to express the underscore "_".
#                         For instance, "\_ABC" will be unescaped to "_ABC"
#                         when replacing "%n" into it.
#            "\\" ....... This string is used to express the backslash.
#                         For instance, "\\n" will be unescaped to "\n"
#                         when replacing "%n" into it.
#            "@" or <string> which follows "-d" option when the option used
#                         This string is used to express the empty string "".
#                         See -d option for detail.
#
# Designed originally by Nobuaki Tounaka
# Written by Shell-Shoccar Japan (@shellshoccarjpn) on 2017-07-18
#
# This is a public-domain software (CC0). It means that all of the
# people can use this for any purposes with no restrictions at all.
# By the way, we are fed up with the side effects which are brought
# about by the major licenses.
#
######################################################################


######################################################################
# Initial Configuration
######################################################################

# === Initialize shell environment ===================================
set -u
umask 0022
export LC_ALL=C
type command >/dev/null 2>&1 && type getconf >/dev/null 2>&1 &&
export PATH="$(command -p getconf PATH)${PATH+:}${PATH-}"
export UNIX_STD=2003  # to make HP-UX conform to POSIX

# === Define the functions for printing usage and error message ======
print_usage_and_exit () {
  cat <<-USAGE 1>&2
	Usage   : ${0##*/} -h<label> [-d[<string>]] <template> <data>
	Args    : <template> . Template file should be inserted into
	          <data> ..... Source data file should be inserted
	Options : -d<string> . Set the symbol string which is regarded as an empty
	                       string. (default: "@")
	                       If "-dNULL" is set and one of the 2nd field string
	                       is "NULL", the macro "%2" will be replaced "" instead
	                       of "NULL".
	          -h<label> .. Set the border string of the mojihame paragraph
	Version : 2017-07-18 02:39:39 JST
	        : Open usp Tukubai (POSIX.1 Bourne Shell/POSIX.1 commands)
	USAGE
  exit 1
}
error_exit() {
  ${2+:} false && echo "${0##*/}: $2" 1>&2
  exit $1
}

# === Check whether the AWK on this host support length() or not =====
case "$(awk 'BEGIN{a[3]=3;a[4]=4;print length(a)}' 2>/dev/null)" in
  2) arlen='length';;
  *) arlen='arlen' ;; # use an equivalent original function if not supported
esac


######################################################################
# Parse Arguments
######################################################################

# === Get the options and the filepath ===============================
# --- initialize option parameters -----------------------------------
label=''
asnull='@'
file_tmpl=''; tmplfromF=''; tmplfrom0='#'
file_data=''; datafromF=''; datafrom0='#'
#
# --- get them -------------------------------------------------------
case $# in [01]) print_usage_and_exit;; esac
optmode=''
i=0
for arg in "$@"; do
  i=$((i+1))
  if [ $i -eq $# ]; then
    [ -z "$optmode" ] || print_usage_and_exit
    if [ -n "$file_tmpl" ]; then
      file_data=$arg
    else
      file_tmpl=$arg
    fi
    break
  fi
  if [ -z "$optmode" ]; then
    if   [ "_$arg" != "_${arg#-h}" ]; then
      label=${arg#-h}
      [ -z "$label" ] && optmode='h'
    elif [ "_$arg" != "_${arg#-d}" ]; then
      asnull=${arg#-d}
    elif [ $i -eq $(($#-1)) ]; then
      file_tmpl=$arg; continue;
    else
      print_usage_and_exit
    fi
  elif [ "$optmode" = 'h' ]; then
    label=$arg
    optmode=''
  else
    print_usage_and_exit
  fi
done

# === Validate the arguments =========================================
[ -n "$label"     ] || print_usage_and_exit
[ -n "$file_tmpl" ] || print_usage_and_exit
use_stdin=0
if   [ "_$file_tmpl" = '_'                ] ||
     [ "_$file_tmpl" = '_-'               ] ||
     [ "_$file_tmpl" = '_/dev/stdin'      ] ||
     [ "_$file_tmpl" = '_/dev/fd/0'       ] ||
     [ "_$file_tmpl" = '_/proc/self/fd/0' ]  ; then
  use_stdin=$((use_stdin+1))
  file_tmpl=''; tmplfromF='#'; tmplfrom0=''
elif [ -f "$file_tmpl"                    ] ||
     [ -c "$file_tmpl"                    ] ||
     [ -p "$file_tmpl"                    ]  ; then
  [ -r "$file_tmpl" ] || error_exit 1 'Cannot open the file: '"$file_tmpl"
  case "$file_tmpl" in /*|./*|../*) :;; *) file_tmpl="./$file_tmpl";; esac
else
  print_usage_and_exit
fi
if   [ "_$file_data"  = '_'                ] ||
     [ "_$file_data"  = '_-'               ] ||
     [ "_$file_data"  = '_/dev/stdin'      ] ||
     [ "_$file_data"  = '_/dev/fd/0'       ] ||
     [ "_$file_data"  = '_/proc/self/fd/0' ]  ; then
  use_stdin=$((use_stdin+1))
  file_data=''; datafromF='#'; datafrom0=''
elif [ -f "$file_data"                     ] ||
     [ -c "$file_data"                     ] ||
     [ -p "$file_data"                     ]  ; then
  [ -r "$file_data" ] || error_exit 1 'Cannot open the file: '"$file_data"
  case "$file_data" in /*|./*|../*) :;; *) file_data="./$file_data";; esac
else
  print_usage_and_exit
fi
[ $use_stdin -gt 1 ] && error_exit 1 'Not allowed to open STDIN more than once'


######################################################################
# Main Routine
######################################################################

export v1=$file_tmpl
export v2=$file_data
export v3=$label
export v4=$asnull
exec awk '
# the alternative length function for array variable
function arlen(ar,i,l){for(i in ar){l++;}return l;}

BEGIN {
  # ===== Initalize ==================================================
  #
  OFS="";
  ORS="";
  file_tmpl = ENVIRON["v1"];
  file_data = ENVIRON["v2"];
  label     = ENVIRON["v3"];
  asnull    = ENVIRON["v4"];
  split("", line_buf);
  split("", begin_linenum);
  split("", end_linenum  );
  split("", maxmacronum);

  # ===== Before the LABEL #1 ========================================
  #
  # --- read and print every line ------------------------------------
  '"$tmplfromF"'while (getline line < file_tmpl) {
  '"$tmplfrom0"'while (getline line            ) {
    if (index(line, label "-1")) {break;}
    print line, "\n";
  }

  # ===== LABEL #1 - LABEL #2 ========================================
  #
  # --- 1) memorize the label zone -----------------------------------
  tmpl_read(label, file_tmpl);
  maxdepth = '$arlen'(maxmacronum);
  for (i=2; i<=maxdepth; i++) {
    if (maxmacronum[i-1] > maxmacronum[i]) {
      maxmacronum[i] = maxmacronum[i-1];
    }
  }
  #
  # --- 2) mojihame for every line of the transaction data -----------
  split("", data_buf_even);
  split("", data_buf_odd);
  depth_old=0;
  depth_new=0;
  oddeven = 0;
  data_file_has_no_lines = 1;
  # print the first data-line
  '"$datafromF"'if (getline < file_data) {
  '"$datafrom0"'if (getline            ) {
    data_file_has_no_lines = 0;
    oddeven = 1;
    for (i=1; i<=NF; i++) {
      s = $i;
      if (s == asnull) {
        s = "";
      } else {
        gsub(/\\\\/, "\n" , s); # The Rule of Premutation
        gsub(/\\_/ , "\t" , s); # -----------------------
        gsub(/_/   , " "  , s); #   "_"    ->   " "
        gsub(/\t/  , "_"  , s); #   "\_"   ->   "_"
        gsub(/\\t/ , "\tt", s); #
        gsub(/\\n/ , "\tn", s); #
        gsub(/\n/  , "\\" , s); #   "\\"   ->   "\"
        gsub(/\tn/ , "\n" , s); #   "\n"   ->   "<LF>"
        gsub(/\tt/ , "\t" , s); #   "\t"   ->   "<TAB>"
      }
      data_buf_odd[i] = s;
    }
    mojihame_with_oddbuf(begin_linenum[1],end_linenum[maxdepth]);
  }
  # print the following data-lines
  '"$datafromF"'while (getline < file_data) {
  '"$datafrom0"'while (getline            ) {
    oddeven = 1 - oddeven;
    if (oddeven != 0) {
      # odd case
      split("", data_buf_odd);
      for (i=1; i<=NF; i++) {
        s = $i;
        if (s == asnull) {
          s = "";
        } else {
          gsub(/\\\\/, "\n" , s); # The Rule of Premutation
          gsub(/\\_/ , "\t" , s); # -----------------------
          gsub(/_/   , " "  , s); #   "_"    ->   " "
          gsub(/\t/  , "_"  , s); #   "\_"   ->   "_"
          gsub(/\\t/ , "\tt", s); #
          gsub(/\\n/ , "\tn", s); #
          gsub(/\n/  , "\\" , s); #   "\\"   ->   "\"
          gsub(/\tn/ , "\n" , s); #   "\n"   ->   "<LF>"
          gsub(/\tt/ , "\t" , s); #   "\t"   ->   "<TAB>"
        }
        data_buf_odd[i] = s;
      }
      for (i=1; i<=NF; i++) {if (data_buf_odd[i] != data_buf_even[i]) {break;}}
      for (j=1; j<'$arlen'(maxmacronum); j++) {if (maxmacronum[j] >= i) {break;}}
      changed_depth = j;
      if (changed_depth < maxdepth) {
        mojihame_with_evenbuf(end_linenum[maxdepth],end_linenum[changed_depth]);
      }
      mojihame_with_oddbuf(begin_linenum[changed_depth],end_linenum[maxdepth]);
    } else {
      # even case
      split("", data_buf_even);
      for (i=1; i<=NF; i++) {
        s = $i;
        if (s == asnull) {
          s = "";
        } else {
          gsub(/\\\\/, "\n" , s); # The Rule of Premutation
          gsub(/\\_/ , "\t" , s); # -----------------------
          gsub(/_/   , " "  , s); #   "_"    ->   " "
          gsub(/\t/  , "_"  , s); #   "\_"   ->   "_"
          gsub(/\\t/ , "\tt", s); #
          gsub(/\\n/ , "\tn", s); #
          gsub(/\n/  , "\\" , s); #   "\\"   ->   "\"
          gsub(/\tn/ , "\n" , s); #   "\n"   ->   "<LF>"
          gsub(/\tt/ , "\t" , s); #   "\t"   ->   "<TAB>"
        }
        data_buf_even[i] = s;
      }
      for (i=1; i<=NF; i++) {if (data_buf_even[i] != data_buf_odd[i]) {break;}}
      for (j=1; j<'$arlen'(maxmacronum); j++) {if (maxmacronum[j] >= i) {break;}}
      changed_depth = j;
      if (changed_depth < maxdepth) {
        mojihame_with_oddbuf(end_linenum[maxdepth],end_linenum[changed_depth]);
      }
      mojihame_with_evenbuf(begin_linenum[changed_depth],end_linenum[maxdepth]);
    }
  }
  # print data which are not printed yet
  if (data_file_has_no_lines == 0) {
    oddeven = 1 - oddeven;
    if (oddeven != 0) {
      # odd case
      if (1 < maxdepth) {
        mojihame_with_evenbuf(end_linenum[maxdepth],end_linenum[1]);
      }
    } else {
      # even case
      if (1 < maxdepth) {
        mojihame_with_oddbuf(end_linenum[maxdepth],end_linenum[1]);
      }
    }
  }

  # ===== After the LABEL #2 =========================================
  #
  # --- read and print every line again ------------------------------
  '"$tmplfromF"'while (getline line < file_tmpl) {
  '"$tmplfrom0"'while (getline line            ) {
    print line, "\n";
  }
}

# ===== Read the template file =======================================
function tmpl_read(label, file_tmpl, depth,label1,label2,n,line,macronum,i) {
  depth  = 1;
  label1 = label "-" depth    ;
  label2 = label "-" (depth+1);
  n = 1;
  begin_linenum[1] = 1;
  end_linenum[1]   = 1;
  '"$tmplfromF"'while (getline line < file_tmpl) {
  '"$tmplfrom0"'while (getline line            ) {
    if        (index(line, label2)) {
      depth++;
      begin_linenum[depth] = n;
      label1 = label "-" depth    ;
      label2 = label "-" (depth+1);
    } else if (index(line, label1)) {
      end_linenum[depth]   = n;
      depth--;
      label1 = label "-" depth    ;
      label2 = label "-" (depth+1);
      if (depth<1) {return;}
    } else {
      line_buf[n] = line;
      while (match(line,/%[0-9]+/)) {
        macronum = substr(line, RSTART+1, RLENGTH-1) * 1;
        i = maxmacronum[depth];
        i = (macronum > i) ? macronum : i;
        maxmacronum[depth] = i;
        line = substr(line, RSTART+RLENGTH);
      }
      n++;
    }
  }
}

# ===== Mojihame the field data to the template file =================
function mojihame_with_oddbuf(start_line, after_stop_line, i,line,fieldnum) {
  for (i=start_line; i<after_stop_line; i++) {
    line = line_buf[i];
    while (match(line,/%[0-9]+/)) {
      print substr(line, 1, RSTART-1);
      fieldnum = substr(line, RSTART+1, RLENGTH-1);
      print (fieldnum in data_buf_odd) ? data_buf_odd[fieldnum] : "%" fieldnum;
      line = substr(line, RSTART+RLENGTH);
    }
    print line, "\n";
  }
}
function mojihame_with_evenbuf(start_line, after_stop_line, i,line,fieldnum) {
  for (i=start_line; i<after_stop_line; i++) {
    line = line_buf[i];
    while (match(line,/%[0-9]+/)) {
      print substr(line, 1, RSTART-1);
      fieldnum = substr(line, RSTART+1, RLENGTH-1);
      print (fieldnum in data_buf_even) ? data_buf_even[fieldnum]: "%" fieldnum;
      line = substr(line, RSTART+RLENGTH);
    }
    print line, "\n";
  }
}
'
