#!/usr/bin/env python3
#coding: utf-8
#
# generate Open Peoopl e-Invoice (UBL 2.1) fron CSV file
# 
# designed by SAMBUICHI, Nobuyuki (Sambuichi Professional Engineers Office)
# written by SAMBUICHI, Nobuyuki (Sambuichi Professional Engineers Office)
#
# MIT License
# 
# Copyright (c) 2021 SAMBUICHI Nobuyuki (Sambuichi Professional Engineers Office)
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
import xml.etree.ElementTree as ET
from collections import defaultdict
import csv
import re
import json
import sys 
import os
import argparse
import math

from dic2etree import *

ET.register_namespace('', ns[''])
ET.register_namespace('xsd', ns['xsd'])
ET.register_namespace('xsi', ns['xsi'])
ET.register_namespace('cac', ns['cac'])
ET.register_namespace('cbc', ns['cbc'])
ET.register_namespace('qdt', ns['qdt'])
ET.register_namespace('udt', ns['udt'])
ET.register_namespace('ccts', ns['ccts'])
ET.register_namespace('cn', ns['cn'])
ET.register_namespace('ubl', ns['ubl'])

TaxAccounting = ['ibg-37','ibt-111','ibg-38','ibt-190','ibt-192','ibt-193','ibt-194','ibt-195']

index_AllowanceCharge = -1
allowance_exist = False
charge_exist = False
new_AllowanceCharge = False

def file_path(pathname):
  if '/' == pathname[0:1]:
    return pathname
  else:
    dir = os.path.dirname(__file__)
    new_path = os.path.join(dir, pathname)
    return new_path

def set_path_value(base, path, value, datatype):
  global CurrencyCode
  if DEBUG:
    tag = re.sub(r'{.*}','',str(base.tag))
    if len(path) > 1:
      print(f' {tag} / {"/".join(path)}')
    else:
      print(f' {tag} / {"/".join(path)}  {value}')
  if len(path) > 1 and path[1].isdigit():
    n = int(path[1])
    path = path[:1]+path[2:]
  else:
    n = 0
  if len(path) > 1 and '@'==path[1][:1]:
    _attr = path[1][1:]
    p = path[0].split(':')
    el = ET.QName(ns[p[0]], p[1])
    elements = base.findall(str(el))
    # elements[0].set(_attr, value)
    if len(elements) > 0:
      element = elements[0]
    else:
      element = ET.SubElement(base, el)
    element.set(_attr, value)
  else:
    if path[0] == 'Invoice':
      p = path[1].split(':')
    else:
      p = path[0].split(':')
    if not p[0] in ns:
      print (p)
    elif 2==len(p):
      el = ET.QName(ns[p[0]], p[1])
      elements = base.findall(str(el))
    else:
      return
    if len(elements) > 0:
      if len(elements) > n:
        element = elements[n]
      else:
        element = ET.SubElement(base, el)
      if 'cbc'==p[0]:
        element.text = value
      else:
        _path = path[1:]
        set_path_value(element, _path, value, datatype)
    else:
      element = ET.SubElement(base, el)
      if 'cbc'==p[0]:
        element.text = value
        if 'Amount'==datatype or 'Unit Price Amount'==datatype:
          element.set('currencyID',CurrencyCode)
        if 'PartyTaxScheme'==str(base.tag)[-14:] and 'CompanyID'==p[1]:
          el1 = ET.QName(ns['cac'], 'TaxScheme')
          element1 = ET.SubElement(base, el1)
          el2 = ET.QName(ns['cbc'], 'ID')
          element2 = ET.SubElement(element1, el2)
          element2.text = 'VAT'
      else:
        _path = path[1:]
        set_path_value(element, _path, value, datatype)

def set_record(record):
  global root
  global header
  global CurrencyCode
  global index_AllowanceCharge
  global allowance_exist
  global charge_exist
  global new_AllowanceCharge
  seq = None
  head_id = record[0]
  if head_id and 'xpath' in pintDict[head_id]:
    head_xpath = pintDict[head_id]['xpath']
  else:
    head_xpath = '/Invoice'
  head_pathList = head_xpath[1:].split('/')[1:]
  if head_id and head_id in pintDict and 'xpath' in pintDict[head_id]:
    head_xpath = pintDict[head_id]['xpath']
    if re.match(r'^(.*)\[.*\](.*)$',head_xpath): 
      head_xpath = re.sub(r'^(.*)\[.*\](.*)$',r'\1\2',head_xpath)
    head_pathList = head_xpath[1:].split('/')[1:]
  seq0 = record[2]
  seq1 = record[5]
  line_num = None
  if 'ibg-25' == record[0]:
    line_num = record[2]
  if ''!= seq0:
    if 'ibt'==head_id[:3]:
      head_pathList = head_pathList[:-1]+[seq0]+head_pathList[-1:]
      base_path = head_pathList[:-1]
    else:
      head_pathList = head_pathList+[seq0]
      base_path = head_pathList
  if len(head_xpath[1:].split('/')) > 1:
    base = '/'+'/'.join(base_path[:-1]) # head_xpath
  else:
    base = ''
    base_path = []
  N = 0 #boughLvl*3-1
  for n in range(len(record)):  # traverse field in a record
    cell = record[n]
    if n > N and cell:
      id = header[n]
      if not id in pintDict:
        continue
      if 'ibt-126'==id:
        index_AllowanceCharge = -1
        allowance_exist = False
        charge_exist = False
        new_AllowanceCharge = False
        if DEBUG: print(f'- id:{id} index_AllowanceCharge:{index_AllowanceCharge} allowance_exist:{allowance_exist}')
      data = pintDict[id]
      datatype = data['datatype']
      xpath = data['xpath']
      xpath_ = None # remove [...] from xpath
      if re.match(r'^(.*)\[.*\](.*)$',xpath): 
        xpath_ = re.sub(r'^(.*)\[.*\](.*)$',r'\1\2',xpath)
        pathList = xpath_[1:].split('/')
      else:
        pathList = xpath[1:].split('/')
      if DEBUG: print(xpath+' '+cell)
      if "[cbc:DocumentTypeCode='130']" in xpath:
        xpath = xpath.replace("[cbc:DocumentTypeCode='130']",'')
        if 'cac:InvoiceLine' in pathList:
          pathList = pathList[:2]+[seq0]+pathList[2:]
        path = pathList[1:]
        CurrencyCode = DocumentCurrencyCode
        set_path_value(root, path, cell, datatype)
        if not '@schemeID' in pathList:
          path = pathList[:-1]+['cbc:DocumentTypeCode']
          path = path[1:]
          CurrencyCode = DocumentCurrencyCode
          set_path_value(root, path, '130', datatype)
      elif "[not(cbc:DocumentTypeCode='130')]" in xpath:
        xpath = xpath.replace("[not(cbc:DocumentTypeCode='130')]",'')
        # _base = base.replace("[not(cbc:DocumentTypeCode='130')]",'')
        base_path = base[1:].split('/')[1:]
        # pathList = re.sub(_base,'', xpath)[1:].split('/')
        if not seq0:
          seq0 = 0
        if base_path:
          seq = str(int(seq0)+1)
          path = base_path+[seq]+pathList
        elif 'cac:InvoiceLine' in xpath:# pathList:
          pathList = pathList[:2]+[seq0]+pathList[2:]
          path = pathList
        else:
          path = pathList
        path = path[1:]
        CurrencyCode = DocumentCurrencyCode
        set_path_value(root, path, cell, datatype)
      elif '/Invoice/cac:TaxTotal' in xpath:
        if 'DocumentCurrencyCode' in xpath:
          _xpath = xpath.replace('[cbc:TaxAmount/@currencyID=/Invoice/cbc:DocumentCurrencyCode/text()]','')
          path = _xpath[1:].split('/')
          if 'cac:TaxSubtotal' in path:
            path = ['cac:TaxTotal','0','cac:TaxSubtotal']+[seq0]+path[3:]
            CurrencyCode = DocumentCurrencyCode
            set_path_value(root, path, cell, datatype)
          else:
            path = ['cac:TaxTotal','0']+path[2:]
            CurrencyCode = DocumentCurrencyCode
            set_path_value(root, path, cell, datatype)
        elif 'TaxCurrencyCode' in xpath:
          _xpath = xpath.replace('[cbc:TaxAmount/@currencyID=/Invoice/cbc:TaxCurrencyCode/text()]','')
          path = _xpath[1:].split('/')
          if 'cac:TaxSubtotal' in path:
            path = ['cac:TaxTotal','1','cac:TaxSubtotal']+[str(seq0)]+path[3:]
            CurrencyCode = TaxCurrencyCode
            set_path_value(root, path, cell, datatype)
          else:
            path = ['cac:TaxTotal','1']+path[2:]
            CurrencyCode = TaxCurrencyCode
            set_path_value(root, path, cell, datatype)
        else:
          if 'cac:TaxTotal' in Dic['Invoice'] and isinstance(Dic['Invoice']['cac:TaxTotal'],list):
            if 'ibt-117-1' in header:
              if DocumentCurrencyCode == record[header.index('ibt-117-1')]:
                loc = '0'
              else: loc = '1'
            else:
              loc = '0'
            pathList = xpath[1:].split('/')
            path = pathList[:2]+[loc]+pathList[2:]
            path = path[:4]+[seq0]+path[4:]
            path = path[1:]
            CurrencyCode = DocumentCurrencyCode
            set_path_value(root, path, cell, datatype)
          else:
            pathList = re.sub(base, '', xpath)[1:].split('/')
            path = base_path+pathList
            path = path[1:]
            CurrencyCode = DocumentCurrencyCode
            set_path_value(root, path, cell, datatype)
      elif 'ChargeIndicator=' in xpath:
        _xpath = xpath[9:]
        # remove [] condition from xpath
        allowanceCharge = re.sub(r'(.*)\[cbc:ChargeIndicator=(true|false)\(\)\](.*)',r'\1',_xpath)
        chargeIndicator = re.sub(r'.*\[cbc:ChargeIndicator=(true|false)\(\)\](.*)',r'\1',_xpath)
        pathList = allowanceCharge.split('/')
        if 'cac:InvoiceLine' in _xpath:
          if len(pathList) > 1:
            pathList = pathList[:1]+[seq0]+pathList[1:]
          else:
            pathList = pathList+[seq0]
        if 'cac:Price' in pathList:
          path = pathList
          path.append('cbc:ChargeIndicator')
          set_path_value(root, path, chargeIndicator, 'Indicator')
          path = re.sub(r'(.*)\[cbc:ChargeIndicator=false\(\)\](.*)',r'\1\2',xpath)[1:].split('/')
          path = path[:2]+[seq0]+path[2:]
          path = path[1:]
          CurrencyCode = DocumentCurrencyCode
          set_path_value(root, path, cell, datatype)
        else:
          # if 'ibt-146'==id:
          if id in [v['id'] for k,v in semDict.items() if 'ibg-29'==v['parent']]: # PRICE DETAILS
            index_AllowanceCharge = 0
            new_AllowanceCharge = True
          elif id in [v['id'] for k,v in semDict.items() if 'ibg-20'==v['parent']] and not allowance_exist:
            # children of DOCUMENT LEVEL ALLOWANCES
            index_AllowanceCharge = 0
            allowance_exist = True
            new_AllowanceCharge = True
          elif id in [v['id'] for k,v in semDict.items() if 'ibg-27'==v['parent']] and not allowance_exist:
            # children of INVOICE LINE ALLOWANCES
            index_AllowanceCharge = 0
            allowance_exist = True
            new_AllowanceCharge = True
          elif id in [v['id'] for k,v in semDict.items() if 'ibg-21'==v['parent']] and not charge_exist:
            # children of DOCUMENT LEVEL CHARGES
            if allowance_exist:
              index_AllowanceCharge = 1
            else:
              index_AllowanceCharge = 0
            charge_exist = True
            new_AllowanceCharge = True
          elif id in [v['id'] for k,v in semDict.items() if 'ibg-28'==v['parent']] and not charge_exist:
            #  children of INVOICE LINE CHARGES
            if allowance_exist:
              index_AllowanceCharge = 1
            else:
              index_AllowanceCharge = 0
            charge_exist = True
            new_AllowanceCharge = True
          if DEBUG: print(f'- id:{id} index_AllowanceCharge:{index_AllowanceCharge} allowance_exist:{allowance_exist}')
          seq_ = str(index_AllowanceCharge)
          if new_AllowanceCharge:
            path = pathList+[seq_]
            path.append('cbc:ChargeIndicator')
            if 'Invoice' == path[0]:
              path = path[1:]
            set_path_value(root, path, chargeIndicator, 'Indicator')
            new_AllowanceCharge = False
          xpath = re.sub(r'(.*)\[cbc:ChargeIndicator=(true|false)\(\)\](.*)',r'\1\3',xpath)
          pathList = xpath[1:].split('/')
          if 'cac:InvoiceLine' in pathList:
            path = pathList[:2]+[line_num]+pathList[2:3]+[seq_]+pathList[3:]
          else:
            path = pathList[:2]+[seq_]+pathList[2:]
          path = path[1:]
          CurrencyCode = DocumentCurrencyCode
          set_path_value(root, path, cell, datatype)
      else:
        if 'cac:InvoiceLine' in pathList:
          if 'cac:AdditionalItemProperty' in pathList:
            if ''!=seq1:
              pathList = pathList[:2]+[seq0]+pathList[2:4]+[seq1]+pathList[4:]
            else:
              pathList = pathList[:2]+[seq0]+pathList[2:]
          else:
            pathList = pathList[:2]+[seq0]+pathList[2:]
        path = pathList[1:]
        CurrencyCode = DocumentCurrencyCode
        set_path_value(root, path, cell, datatype)

if __name__ == '__main__':
  # Create the parser
  parser = argparse.ArgumentParser(prog='csv2invoice',
                                  usage='%(prog)s [options] infile -o outfile',
                                  description='CSVファイルから電子インボイスXMLを作成')
  # Add the arguments
  parser.add_argument('inFile', metavar='infile', type=str, help='入力CSVファイル')
  parser.add_argument('-o', '--out')
  parser.add_argument('-e', '--encoding')  # 'Shift_JIS' 'cp932'
  parser.add_argument('-t', '--transpose', action='store_true')
  parser.add_argument('-v', '--verbose', action='store_true')
  parser.add_argument('-d', '--debug', action='store_true')

  args = parser.parse_args()
  in_file = file_path(args.inFile)
  pre, ext = os.path.splitext(in_file)
  if args.out:
    out_file = args.out.lstrip()
    out_file = file_path(out_file)
  else:
    out_file = pre+'.xml'
  tmp_file = pre+'.txt'
  ncdng = args.encoding.lstrip()
  if not ncdng:
    ncdng = 'UTF-8'
  TRANSPOSE = args.verbose
  VERBOSE = args.verbose
  DEBUG = args.debug

  # Check if infile exists
  if not os.path.isfile(in_file):
    print('入力ファイルがありません')
    sys.exit()
  if VERBOSE:
    print('** START ** ', __file__)

  # # initialize globals
  pintDict = {}
  semDict = {}
  header_id = None
  header_count = 0
  DocumentCurrencyCode = None
  TaxCurrencyCode = None
  CurrencyCode = None
  Dic = defaultdict(type(''))
  Dic['Invoice'] = {}
  sortedDic = defaultdict(type(''))
  sortedDic['Invoice'] = {}
  pintDict = defaultdict(type(''))
  pintL1 = []
  multipleBG = []

  pint_file = file_path('data/common/xpath.csv')
  # SemSort,ID,Level,BT,BT_ja,Desc,Desc_ja,Expl,Expl_ja,Example,Card,DataType,Section,Extension,SyntaxSort,XPath,selectors,Codelist,ModCard,Occurrence,CardinalityAlignment
  # 0       1  2     3  4     5    6       7    8       9       10   11       12      13        14         15    16        17       18      19         20
  COL_SemanticSort = 0
  COL_ID = 1
  COL_level = 2
  COL_BT = 3
  COL_card = 10
  COL_datatype = 11
  COL_SyntaxSort = 14
  COL_xpath = 15
  if VERBOSE:
    print(f'*** XPath file {pint_file}')
  with open(pint_file, encoding='utf-8', newline='') as f0:
    reader = csv.reader(f0) #, delimiter='\t')
    header = next(reader)
    for v in reader:
      id = v[COL_ID].strip()
      if id: # and 'ibt-032' != id:
        semSort = v[COL_SemanticSort]
        xpath = v[COL_xpath]
        syntaxSort = v[COL_SyntaxSort]
        if not syntaxSort:
          syntaxSort = '9999'
        if not xpath:
          xpath = '/'+id
        if len(v) > COL_xpath and '/' in xpath:
          if v[COL_BT]: BT = v[COL_BT]
          else: BT = None
          level = v[COL_level]
          card = ''+v[COL_card].strip()
          datatype = ''+v[COL_datatype].strip()
          data = {'syntaxSort':syntaxSort,'id':id,'level':level,'BT':BT,'card':card,'datatype':datatype,'xpath':xpath}
          pintDict[id] = data
          semDict[semSort] = {'id':id,'level':int(level)}

  sorted_semDict = sorted(semDict.items(), key=lambda x:x[0])
  level = 0
  parent = ['ibg-00']
  for k,v in dict(sorted_semDict).items():
    if v['level'] == level:
      semDict[k]['parent'] = parent[level-1]
      parent[level] = v['id']
    elif v['level'] == level+1:
      semDict[k]['parent'] = parent[level]
      level = v['level']
      if level == len(parent):
        parent.append(None)
      parent[level] = v['id']
    else:
      level = v['level']
      semDict[k]['parent'] = parent[level-1]
      parent[level] = v['id']
      for i in range(len(parent)):
        if i > level:
          parent[i] = None

  if VERBOSE:
    print(f'*** Input file {in_file}')

  with open(in_file, encoding=ncdng, newline='') as f:
    reader = csv.reader(f)#, delimiter='\t')
    rows = []
    i = 0
    for record in reader:
      id = record[0]
      if id and id in pintDict: #\ufeff
        data = pintDict[id]
        syntaxSort = data['syntaxSort']
        if 'ibt-005'==id:
          DocumentCurrencyCode = record[4]
        elif 'ibt-006'==id:
          TaxCurrencyCode = record[4]
      else:
        syntaxSort = '000'+str(i)
        if '\ufeff'==id:
          id = ''
        i += 1
      row = [syntaxSort,id]+record[4:]
      rows.append(row)

  boughLvl = math.ceil(i/3)

  # https://www.geeksforgeeks.org/ways-sort-list-dictionaries-values-python-using-itemgetter/ 
  # https://www.delftstack.com/ja/howto/python/sort-list-of-lists-in-python/
  sorted_rows = sorted(rows, key=lambda x:x[0])
  sorted_rows = [d[1:] for d in sorted_rows]

  for row in sorted_rows:
    id = row[0]
    if not id or not id in pintDict:
      continue
    data = pintDict[id]
    level = data['level']
    card = data['card']
    xpath = data['xpath']
    if re.match(r'.*\[cbc:TaxAmount/@currencyID.*\]',xpath):
      if TaxCurrencyCode and id in TaxAccounting:
        xpath = xpath.replace('/Invoice/cbc:TaxCurrencyCode/text()',"'"+TaxCurrencyCode+"'")
      elif DocumentCurrencyCode:
        xpath = xpath.replace('/Invoice/cbc:DocumentCurrencyCode/text()',"'"+DocumentCurrencyCode+"'")
      elementId = re.sub(r'^/Invoice/(.*\])(\/.*)?',r'\1',xpath)
      if not elementId in pintL1:
        pintL1.append(elementId)
    elif re.match(r'^/Invoice/[^\/]*$',xpath) or '1'==level:
      elementId = re.sub(r'^/Invoice/([^\/]*)(\/.*)?',r'\1',xpath)
      pintL1.append(elementId)

  for k,data in pintDict.items():
    xpath = data['xpath']
    card = data['card']
    if 'Invoice'==xpath[1:8] and 'n'==card[-1:] and re.match(r'^.*/(cac:.+)+(cbc:.+)?$',xpath):
      elementId = re.sub(r'^(.*)/(cbc:.+)?$',r'\1',xpath)
      elementIds = elementId[9:].split('/')
      for id in elementIds:
        _id = re.sub(r'^([^\[]*)(\[.*\])?',r'\1',id)
        multipleBG.append(_id)

  multipleBG = list(set(multipleBG))

  # see https://stackoverflow.com/questions/6473679/transpose-list-of-lists
  # transposed_rows = [list(i) for i in zip(*sorted_rows)]
  row_count = len(sorted_rows)
  col_count = len(sorted_rows[0])
  transposed_rows = []
  while len(transposed_rows) < col_count:
    transposed_rows.append([])
    while len(transposed_rows[-1]) < row_count:
      transposed_rows[-1].append(0)
  for i in range(row_count):
    for j in range(col_count):
      transposed_rows[j][i] = sorted_rows[i][j]

  invoiceText = '''
  <ubl:Invoice 
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2" 
    xmlns:cac="urn:oasis:names:specification:ubl:schema:xsd:CommonAggregateComponents-2" 
    xmlns:cbc="urn:oasis:names:specification:ubl:schema:xsd:CommonBasicComponents-2" 
    xmlns:ubl="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2"
    xsi:schemaLocation="urn:oasis:names:specification:ubl:schema:xsd:Invoice-2 http://docs.oasis-open.org/ubl/os-UBL-2.1/xsd/maindoc/UBL-Invoice-2.1.xsd" /> 
  '''  # this step adds xsi:schemaLocation attribute
  root = ET.XML(invoiceText)
  # root = ET.Element(ET.QName(ns[''], 'Invoice'))
  header = transposed_rows[0]
  for i in range(1,len(transposed_rows)):
    record = transposed_rows[i]
    set_record(record)

  ET.ElementTree(root).write(out_file, xml_declaration=True, encoding='utf-8')

  if VERBOSE:
    print(f'** END ** {out_file}')