#!/usr/bin/env python3
#coding: utf-8
#
# generate TSV from Open Peoopl e-Invoice (UBL 2.1)
# 
# designed by SAMBUICHI, Nobuyuki (Sambuichi Professional Engineers Office)
# written by SAMBUICHI, Nobuyuki (Sambuichi Professional Engineers Office)
#
# MIT License
# 
# Copyright (c) 2021 SAMBUICHI Nobuyuki (Sambuichi Professional Engineers Office)
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
import xml.etree.ElementTree as ET
# from collections import defaultdict
from operator import itemgetter
import pandas as pd
import csv
import re
import json
import sys 
import os
import argparse
import numpy as np

from dic2etree import *

DEBUG = False
dictID = {}  # defaultdict(type(''))
dictXpath = {}  # defaultdict(type(''))
sortID = {}
sortXpath = {}
ChargeIndicator = {}

Charges = {
  'ibg-21','ibt-099a','ibt-103a','ibt-105','ibt-104','ibt-101','ibt-099','ibt-099-1','ibt-100','ibt-100-1','ibt-102','ibt-103','ibt-103a',
  'ibg-28','ibt-141a','ibt-145','ibt-144','ibt-143','ibt-141','ibt-141-1','ibt-142','ibt-142-1','ibt-142a','ibt-142b','ibt-142c'
}

Allowances = {
  'ibg-20','ibt-092a','ibt-096a','ibt-098','ibt-097','ibt-094','ibt-092','ibt-092-1','ibt-093','ibt-093-1','ibt-095','ibt-096','ibt-096a',
  'ibg-27','ibt-136a','ibt-140','ibt-139','ibt-139a','ibt-138','ibt-136','ibt-136-1','ibt-137','ibt-137-1','ibt-137a','ibt-138','ibt-137c',
  'ibt-147','ibt-147-1'
}

patternIndex = re.compile("(ibg-[0-9]{2,3})_(ibg-[0-9]{2,3}|------)_(ibg-[0-9]{2,3}|------)")  # column_id
patternSort = re.compile("([0-9]{4})_([0-9]{4})_([0-9]{4})")  # sort_id

def getID(xpath):
  ID = dictID[xpath]
  if isinstance(ID, str):
    return ID
  li = list(ID)
  if 'cac:AllowanceCharge' in xpath:
    if 'v' in ChargeIndicator and ChargeIndicator['v']:
      if li[0] in Charges:
        return li[0]
      if li[1] in Charges:
        return li[1] 
    else:
      if li[0] in Allowances:
        return li[0]
      if li[1] in Allowances:
        return li[1]
  else:
    li.sort()
    return li[0]

def file_path(pathname):
  if '/' == pathname[0:1]:
    return pathname
  else:
    dir = os.path.dirname(__file__)
    new_path = os.path.join(dir, pathname)
    return new_path

def dict_to_tsv(tsv, root):
  def _setup_record(case, path, tag, k, v):
    pathList = path[1:].split('/')
    _path = ''
    base_id = ''
    bough_id = ''
    twig_id = ''
    for p in pathList:
      _path += '/'+p
      if _path != 'Invoice' and _path in dictID:
        _id = getID(_path)
        if _id in parents:
          column_id = parents[_id]
          m = patternIndex.search(column_id)  # /(ibg-[0-9]{2})_(ibg-[0-9]{2}|------)_(ibg-[0-9]{2}|------)/
          base_id = m.group(1)
          bough_id = m.group(2)
          twig_id = m.group(3)
          # if column_id != base_id+'_'+bough_id+'_'+twig_id:
          #   print(column_id, base_id, bough_id, twig_id)
    _record = {}
    if 1 == case:
      pathString = path
      if pathString in dictID:
        id = getID(pathString)
        value = v
      else:
        print(f'--- WARNING invoice2tsv _setup_record(tsv, root) --- case {case} {pathString} not in dictID[] value={v}')
        return None
    elif 2 == case or 3 == case:
      if not k in path and  path+'/'+k in dictID:
        pathString = path+'/'+k
        id = getID(pathString)
        tag = k
        value = v
      else:
        pathString = path
        if pathString in dictID:
          id = getID(pathString)
          tag = k
          value = v
        else:
          print(f'--- WARNING _setup_record(tsv, root) --- case {case} {pathString} not in dictID value={v}')
          return None
    elif 4 == case:
      if not k in path:
        pathString = path+'/'+k
      else:
        pathString = path
      if pathString in dictID:
        if 'cac:AllowanceCharge' in pathString:
          ChargeIndicator['v'] = v['cbc:ChargeIndicator']
        id = getID(pathString)
      else:
        if verbose:
          print(f'--- WARNING _setup_record(tsv, root) --- case {case} {pathString} not in dictID')
        id = 'ibg-XX'  # TODO error handling
      tag = k
      value = ''
      if not base_id:
        if id in parents:
          column_id = parents[id]
          m = patternIndex.search(column_id)  # /(ibg-[0-9]{2})_(ibg-[0-9]{2}|------)_(ibg-[0-9]{2}|------)/
          base_id = m.group(1)
          bough_id = m.group(2)
          twig_id = m.group(3)
          # if column_id != base_id+'_'+bough_id+'_'+twig_id:
          #   print(column_id, base_id, bough_id, twig_id)

    _record = {'case': case, 'base_id':base_id, 'bough_id':bough_id, 'twig_id':twig_id, 'id': id, \
                'path': pathString, 'tag': tag, 'value': value}
    return _record

  def _to_tsv(tsv, path, tag, body):
    if 'cbc:ChargeIndicator' == tag:
      ChargeIndicator['v'] = isinstance(body, str) and 'true' == body.lower()
    if len(tag) > 0:
      path = path+'/'+tag
    d = body
    v = {}
    if not d:
      pass
    elif isinstance(d, str):  # case 1
      record = _setup_record(1, path, tag, '', d)
      if record:
        tsv.append(record)
    elif isinstance(d, dict):
      if '@currencyID' in d:
        k = '#text'
        record = _setup_record(2, path, tag, k, d[k])
        if record:
          tsv.append(record)
        k = '@currencyID'
        record = _setup_record(2, path, tag, k, d[k])
        if record:
          tsv.append(record)
      elif '@unitCode' in d:
        k = '#text'
        record = _setup_record(2, path, tag, k, d[k])
        if record:
          tsv.append(record)
        k = '@unitCode'
        record = _setup_record(2, path, tag, k, d[k])
        if record:
          tsv.append(record)
      else:
        for k, v in d.items():
          if isinstance(k, str) and k.startswith('#'):  # case 2
            assert k == '#text'
            record = _setup_record(2, path, tag, k, v)
            if record:
              tsv.append(record)
          elif isinstance(k, str) and k.startswith('@'):  # case 3
            if '@cbc:schemaLocation' != k:
              if not path+'/'+k in dictID:
                print(f'--- WARNING(_to_tsv) --- {path}/{k} is not in dictID')
              record = _setup_record(3, path, tag, k, v)
              if record:
                tsv.append(record)
          elif isinstance(v, list):  # case 4
            for e in v:
              record = _setup_record(4, path, tag, k, e)
              if record:
                tsv.append(record)
              _to_tsv(tsv, path, k, e)
          else:
            _to_tsv(tsv, path, k, v)

    elif isinstance(d, list):
      print(f'invalid type {type(d)} {d}')
    else:
      print(f'invalid type {type(d)} {d}')

  assert isinstance(root, dict) and len(root) == 1
  for tag, body in root.items():
    _to_tsv(tsv, '', tag, body)

def get_id(v):
  id = v['id']
  if isinstance(id, str):
    return id
  path = v['path']
  tag = v['tag']
  if '@' in tag and 'ibg-00' != id:
    if not tag in path:
      path += '/'+tag
    id = getID(path)
    return id
  if not id:
    id = getID(path)
    return id
  li = list(id)
  if 'v' in ChargeIndicator and ChargeIndicator['v']:
    if li[0] in Charges:
      return li[0]
    if li[1] in Charges:
      return li[1] 
  else:
    if li[0] in Allowances:
      return li[0]
    if li[1] in Allowances:
      return li[1]
  return li[0]

def get_column_id(v):
  base_id = v['base_id']
  bough_id = v['bough_id']
  if 0 == len(bough_id):
    bough_id = '------'
  twig_id = v['twig_id']
  if 0 == len(twig_id):
    twig_id = '------'
  column_id = base_id+'_'+bough_id+'_'+twig_id 
  return column_id

def get_sort_id(v):
  base_id = v['base_id']
  bough_id = v['bough_id']
  if base_id in sortXpath:
    base_sort = sortXpath[base_id][1]
  elif 'ibg-00' == base_id:
    base_sort = '1000'
  else:
    base_sort = '0000'
  if bough_id in sortXpath:
    bough_sort = sortXpath[bough_id][1]
  else:
    bough_sort = '0000'
  twig_id = v['twig_id']
  if twig_id in sortXpath:
    twig_sort = sortXpath[twig_id][1]
  else:
    twig_sort = '0000'
  sort_id = base_sort+'_'+bough_sort+'_'+twig_sort
  return sort_id

def append_tsv(column_id, column, id, duplicate):
  m = patternIndex.search(column_id)  # /(ibg-[0-9]{2})_(ibg-[0-9]{2}|------)_(ibg-[0-9]{2}|------)/
  base_id = m.group(1)
  bough_id = m.group(2)
  twig_id = m.group(3)

  if bough_id in dictXpath and 'card' in dictXpath[bough_id]:
    bough_card = dictXpath[bough_id]['card']
    if '..1' == bough_card[1:]:
      bough_card = '-'
    elif '..n' == bough_card[1:]:
      bough_card = 0
      if bough_id in repetition:
        bough_card = repetition[bough_id]
  else:
    bough_card = '-'

  if twig_id in dictXpath and 'card' in dictXpath[twig_id]:
    twig_card = dictXpath[twig_id]['card']
    if '..1' == twig_card[1:]:
      twig_card = '-'
    elif '..n' == twig_card[1:]:
      twig_card = 0
      if twig_id in repetition:
        twig_card = repetition[twig_id]
      else:
        twig_card = 0
        repetition[twig_id] = 0
      if not bough_id in twigs:  # assuming bough_id is in repetition:
        twigs[bough_id] = []
      if not twig_id in twigs[bough_id]:
        twigs[bough_id].append(twig_id)
  else:
    twig_card = '-'

  if duplicate:
    if isinstance(twig_card,int):
      twig_card -= 1
    elif isinstance(bough_card,int):
      bough_card -= 1
  bough_card = str(bough_card)
  twig_card = str(twig_card)

  column_index = base_id+'_'+bough_id+'_'+bough_card+'_'+twig_id+'_'+twig_card
  index = [column_header[x] for x, y in enumerate(column_header) if y[0] == column_id]
  if 1 == len(index):
    index = index[0]
    column_sort = index[1]
    m = patternSort.search(column_sort)  # /([0-9]{4})_([0-9]{4})_([0-9]{4})")/
    base_sort = m.group(1)
    bough_sort = m.group(2)
    twig_sort = m.group(3)
    _column_sort = base_sort+'_'+bough_sort+'_'+bough_card+'_'+twig_sort+'_'+twig_card
    if bough_id and bough_id in dictXpath and 'BT' in dictXpath[bough_id]:
      bough_name = dictXpath[bough_id]['BT']
    else:
      bough_name = ''
    if twig_id and twig_id in dictXpath and 'BT' in dictXpath[twig_id]:
      twig_name = dictXpath[twig_id]['BT']
    else:
      twig_name = ''
    if verbose:
      print(f'({_column_sort}) {column_index} {id} {bough_name} {twig_name}')
    if _column_sort in row:
      _row = row[_column_sort]
      _column = _row[8:]
      for i in range(len(column)):
        if len(_column[i]) > 0 and column[i] != _column[i]:
          if len(column[i]) > 0 and verbose:
            print(f'--- WARNING --- {column_index} {_column_sort} is duplicated column[{i}] {column[i]} and {_column[i]}')
          if _column_sort+'-1' in row:
            column_ = row[_column_sort+'-1'][8:]
            column_[i] = _column[i]
            _column = column_
          row[_column_sort+'-1'] = [bough_id, bough_card, twig_id, twig_card, column_index, _column_sort, bough_name, twig_name]+_column
        else:
          column[i] = _column[i]
    row[_column_sort] = [bough_id, bough_card, twig_id, twig_card, column_index, _column_sort, bough_name, twig_name]+column
  else:
    print(f'-- NOT FOUND {column_id} in column_header --')

if __name__ == '__main__':
  # Create the parser
  parser = argparse.ArgumentParser(prog='invoice2tsv',
                                    usage='%(prog)s [options] infile -o outfile',
                                    description='電子インボイスXMLファイルをTSVファイルに変換')
  # Add the arguments
  parser.add_argument('inFile', metavar='infile', type=str, help='入力XMLファイル')
  parser.add_argument('-o', '--out')
  parser.add_argument('-e', '--encoding')  # 'Shift_JIS' 'cp932'
  # parser.add_argument('-l', '--level', action='store_true')
  parser.add_argument('-v', '--verbose', action='store_true')

  args = parser.parse_args()
  in_file = file_path(args.inFile)
  pre, ext = os.path.splitext(in_file)
  tmp_file = pre+'.txt'
  if args.out:
    out_file = args.out.lstrip()
    out_file = file_path(out_file)
  else:
    out_file = pre+'.tsv'
  encoding = args.encoding
  if encoding:
    encoding = encoding.lstrip()
  else:
    encoding = 'UTF-8'
  verbose = args.verbose
  # Check if infile exists
  if not os.path.isfile(in_file):
    print('入力ファイルがありません')
    sys.exit()
  if verbose:
    print(f'** START ** {__file__}')

  dictID['/Invoice'] = 'ibg-00'

  xpath_file = file_path('data/common/xpath.txt')
  # SemanticSort paent ID Level BusinessTerm BusinessTermJP Card. DataType SyntaxSort xPath
  # 0            1     2  3     4            5              6     7        8          9
  COL_SemanticSort = 0
  COL_parent = 1
  COL_ID = 2
  COL_level = 3
  COL_BT = 4
  COL_BT_ja = 5
  COL_card = 6
  COL_datatype = 7
  COL_SyntaxSort = 8
  COL_xpath = 9
  parents = {}
  check = {''}
  if verbose:
    print(f'*** XPath file {xpath_file}')
  with open(xpath_file, encoding='utf-8', newline='') as f0:
    reader = csv.reader(f0, delimiter='\t')
    header = next(reader)
    for v in reader:
      parent = v[COL_parent].strip()
      id = v[COL_ID].strip()
      if 'ibg-' in id:
        parents[id] = parent+'_'+id
      else:
        parents[id] = parent
      if id:
        xpath = v[COL_xpath]
        if len(v) > 7 and '/' in xpath:
          semanticSort = v[COL_SemanticSort]
          BT = v[COL_BT]
          BT_ja = v[COL_BT_ja]
          level = v[COL_level]
          card = v[COL_card].strip()
          datatype = v[COL_datatype]
          syntaxSort = v[COL_SyntaxSort]
          data = {'level':level,'parent':parent,'BT':BT,'BT_ja':BT_ja,'card':card,'datatype':datatype,'xpath':xpath }
          if xpath.count('/') > 1 and xpath in dictID:
            if dictID[xpath] != id or id in Charges or id in Allowances:
              if isinstance(dictID[xpath], str):
                dictID[xpath] = {dictID[xpath], id}
              else:
                dictID[xpath].add(id)
            else:
              pass
          else:
            if id in Charges or id in Allowances:
              dictID[xpath] = {id}
            dictID[xpath] = id
          dictXpath[id] = data
          sortID[xpath] = (id, syntaxSort)
          sortXpath[id] = (data, syntaxSort)
          if 'Amount' == datatype or 'Unit' == datatype:
            level = str(int(level)+1)
            xpath = xpath+'/@currencyID'
            if not xpath in dictID:
              data = {'id':id,'syntaxSort':syntaxSort,'level':level,'parent':parent,'BT':None,'card':None,'datatype':None,'xpath':xpath}
              check.add(json.dumps(data))
          elif 'Quantity' == datatype:
            level = str(int(level)+1)
            xpath = xpath+'/@unitCode'
            if not xpath in dictID:
              data = {'id':id,'syntaxSort':syntaxSort,'level':level,'parent':parent,'BT':None,'card':None,'datatype':None,'xpath':xpath}
              check.add(json.dumps(data))
    check_ = list(check)
    for data in check_:
      if not data:
        continue
      data_ = json.loads(data)
      if not data_:
        continue
      id = data_['id']
      xpath = data_['xpath']
      if not xpath in dictID:
        id = id+'-1'
        syntaxSort = data_['syntaxSort']
        dictID[xpath] = id
        dictXpath[id] = data
        sortID[xpath] = (id, syntaxSort)
        sortXpath[id] = (data, syntaxSort)

  for k,v in parents.items():
    if v in parents and 'ibg-00' != v[:6]:
      parents[k] = parents[v]
  for k,v in parents.items():
    if v[:6] in parents and 'ibg-00' != v[:6]:
      parents[k] = parents[v[:6]]+v[-7:]
  for k,v in parents.items():
    if 2 == v.count('_'):
      pass
    elif 1 == v.count('_'):
      parents[k] = v+'_------'
    elif 0 == v.count('_'):
      parents[k] = v+'_------_------'

  if verbose:
    print(f'*** Input file {in_file}')
  tree = ET.parse(in_file)
  root = tree.getroot()
  dic = etree_to_dict(root)

  dicJson = json.dumps(dic)
  dicJson = re.sub('{'+ns['']+'}', '', dicJson)
  dicJson = re.sub('{'+ns['cac']+'}', 'cac:', dicJson)
  dicJson = re.sub('{'+ns['cbc']+'}', 'cbc:', dicJson)
  dicJson = re.sub('{'+ns['xsi']+'}', 'cbc:', dicJson)
  dicJson = re.sub('{'+ns['xsd']+'}', 'cbc:', dicJson)
  dic2 = json.loads(dicJson)

  tsv = []
  dict_to_tsv(tsv, dic2)
  
  header = []
  column_header = []
  for v in tsv:
    case = v['case']
    id = get_id(v)
    if 4 != case and id and not 'ibg-' in id:
      index = [x for x, y in enumerate(header) if y[0] == id]
      if 1 == len(index):
        pass
      else:
        if id in sortXpath:
          header.append((id, sortXpath[id][1]))
        else:
          header.append((id, ''))
    column_id = get_column_id(v)
    sort_id = get_sort_id(v)
    index = [x for x, y in enumerate(column_header) if y[0] == column_id]
    if 1 == len(index):
      pass
    else:
      column_header.append((column_id, sort_id))
  
  header = sorted(header, key=lambda d: d[1])
  sortedHeader = [x[0] for x in header]
  column_header = sorted(column_header, key=lambda d: d[1])

  max_index = 0
  for v in tsv:
    case = v['case']
    id = get_id(v)
    if 4 != case and id and not 'ibg-' in id:
      if id in sortedHeader:
        index = sortedHeader.index(id)
      else:
        index = -1
      if index > max_index:
        max_index = index

  previous_id = None
  previous_column = None
  repetition = {}
  twigs = {}
  row = {}
  column_length = max_index+2
  column = ['']*column_length
  for v in tsv:
    case = v['case']
    id = get_id(v)
    if id in parents:
      column_id = parents[id]
    else:
      print(f'--- ERROR --- {id} for {v} not in parents')
    if 'ibg-00' != id and previous_id and previous_id!=column_id:

      append_tsv(previous_id, previous_column, id, None)
      
      column = ['']*column_length
    column[0] = column_id
    value = v['value']
    # value = value.encode('unicode_escape').decode('utf-8')
    if 4 != case and id and not 'ibg-' in id:
      if id in sortedHeader:
        index = sortedHeader.index(id)
        if column[index+1]:
          if verbose:
            print(f'-- duplicate {previous_id} {id}')
          append_tsv(previous_id, previous_column, id, True)
          column = ['']*column_length
        column[index+1] = value
    if 4 == case:
      if not id in repetition:
        repetition[id] = 0
      else:
        repetition[id] += 1
        if id in twigs:
          twig_ids = twigs[id]
          if twig_ids:
            for i in twig_ids:
              repetition[i] = 0

    previous_id = column_id
    previous_column = column

  append_tsv(previous_id, previous_column, id, None)

  # see https://www.geeksforgeeks.org/ways-sort-list-dictionaries-values-python-using-itemgetter/ 
  _row = []
  for k,v in row.items():
    _row.append({'column_sort':k, 'v':v})
  tmp_row = sorted(_row, key=itemgetter('column_sort'))
  sorted_row = [x['v'] for x in tmp_row]

  N = 9
  max_index += 1
  column = ['']*max_index
  for i in range(max_index):
    id = sortedHeader[i]
    column[i] = id
  sorted_row.insert(0,['']*N+column)

  column = ['']*max_index
  for i in range(max_index):
    id = sortedHeader[i]
    if id and id in dictXpath and 'BT' in dictXpath[id]:
      column[i] = dictXpath[id]['BT']
  sorted_row.insert(1,['']*N+column)

  column = ['']*max_index
  for i in range(max_index):
    id = sortedHeader[i]
    if encoding and ('Shift_JIS'==encoding or 'cp932'==encoding):
      if id and id in dictXpath and 'BT_ja' in dictXpath[id]:
        column[i] = dictXpath[id]['BT_ja']
    else:
      if id and id in dictXpath and 'xpath' in dictXpath[id]:
        column[i] = dictXpath[id]['xpath']
  sorted_row.insert(2,['']*N+column)

  with open(tmp_file, 'w', encoding=encoding) as f:
    writer = csv.writer(f, delimiter='\t')
    for v in sorted_row:
      writer.writerow(v)

  # see https://stackoverflow.com/questions/6473679/transpose-list-of-lists
  # transposed_row = np.array(sorted_row).T.tolist() ## DONT WORK FOR Write file
  transposed_row = [list(i) for i in zip(*sorted_row)]
  dictRow = {}
  if encoding and ('Shift_JIS'==encoding or 'cp932'==encoding):
    for i in range(6,8):
      if 6 == i:
        row = transposed_row[0]
      elif 7 == i:
        row = transposed_row[2]
      for j in range(len(row)):
        id = row[j]
        if  id in dictXpath and 'BT_ja' in dictXpath[id]:
          transposed_row[i][j] = dictXpath[id]['BT_ja']
      dictRow[transposed_row[i][0]] = transposed_row[i]
  for i in range(9, len(transposed_row)):
    dictRow[transposed_row[i][0]] = transposed_row[i]

  transposed = []
  column_length = len(transposed_row[0])
  for x,v in dictXpath.items():
    level = v['level']
    bt = v['BT']
    bt_ja = v['BT_ja']
    card = v['card']
    datatype = v['datatype']
    if 'ibg-' in x:
      if encoding and ('Shift_JIS'==encoding or 'cp932'==encoding):
        record = [x,level,bt,bt_ja,card,datatype]+['']*(column_length-3)
        transposed.append(record)
      else:
        record = [x,level,bt,card,datatype]+['']*(column_length-2)
        transposed.append(record)
    elif x in dictRow:
      row = dictRow[x]
      if encoding and ('Shift_JIS'==encoding or 'cp932'==encoding):
        transposed.append(row[:1]+[level]+row[1:3]+[card,datatype]+row[3:])
      else:
        transposed.append(row[:1]+[level]+row[1:2]+[card,datatype]+row[3:])

  with open(out_file, 'w', encoding=encoding) as f:
    writer = csv.writer(f, delimiter='\t')
    # if level:
    if DEBUG:
      for i in range(8):
        writer.writerow(['']+transposed_row[i])
    else:
      writer.writerow(['']*3+transposed_row[0])
      writer.writerow(['']*3+transposed_row[6])
      writer.writerow(['']*3+transposed_row[1])
      writer.writerow(['']*3+transposed_row[2])
      writer.writerow(['']*3+transposed_row[7])
      writer.writerow(['']*3+transposed_row[3])
    for l in transposed:
      writer.writerow(l)

  if verbose:
    print(f'** END ** {out_file}')